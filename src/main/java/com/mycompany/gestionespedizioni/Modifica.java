/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.gestionespedizioni;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import javax.swing.JFrame;

/**
 *
 * @author caggi
 */
public class Modifica extends javax.swing.JFrame {

    Connection conn = null;
    String url = "jdbc:postgresql://localhost/gestioneSpedizioni";
    String user = "postgres";
    String pass = "root";

    ArrayList<Cliente> clienti = new ArrayList<>();
    Spedizioni sped;
    Update t;
    Integer ns = 0;
    CheckR cr;
    Mittente mi;
    Modifica mod;

    private Boolean b = false;

    private String ragsoc;
    private String ind;
    private String cap;

    /**
     * Creates new form Modifica
     */
    public Modifica() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nomCli = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        idCli = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tos = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        data = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ragsocMitt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        indMitt = new javax.swing.JTextField();
        capMitt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        ragsocDest = new javax.swing.JTextField();
        indDest = new javax.swing.JTextField();
        capDest = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        ddtxt = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        dataCons = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel16 = new javax.swing.JLabel();
        ncollitxt = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        teltxt = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        voltxt = new javax.swing.JTextField();
        salva = new javax.swing.JButton();
        pulisci = new javax.swing.JButton();
        stato = new javax.swing.JComboBox<>();
        r_lbl = new javax.swing.JLabel();
        mod_delR = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel1ComponentShown(evt);
            }
        });

        jLabel1.setText("NOMINTIVO MITTENTE");

        nomCli.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                nomCliItemStateChanged(evt);
            }
        });

        jLabel2.setText("ID CLIENTE");

        idCli.setEditable(false);

        jLabel3.setText("STATO");

        jLabel4.setText("TIPO SERV");

        tos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SPEDIZIONE", "RITIRO" }));

        jLabel5.setText("DATA");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("MITTENTE");

        jLabel7.setText("RAG. SOCIALE");

        ragsocMitt.setEditable(false);

        jLabel8.setText("INDIRIZZO");

        jLabel9.setText("CAP");

        indMitt.setEditable(false);

        capMitt.setEditable(false);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("DESTINATARIO");

        jLabel11.setText("RAG. SOCIALE");

        jLabel12.setText("INDIRIZZO");

        jLabel13.setText("CAP");

        ragsocDest.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        ragsocDest.setNextFocusableComponent(indDest);

        indDest.setNextFocusableComponent(capDest);

        jLabel14.setText("N. DDT");

        ddtxt.setEnabled(false);

        jLabel15.setText("DATA CONSEGNA");

        jLabel16.setText("N. COLLI");

        jLabel17.setText("TEL");

        jLabel18.setText("VOL");

        salva.setText("SALVA");
        salva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvaActionPerformed(evt);
            }
        });

        pulisci.setText("PULISCI");
        pulisci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pulisciActionPerformed(evt);
            }
        });

        stato.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ACQUISITA", "IN CONSEGNA", "IN GIACENZA", "CONSEGNATA", "MODIFICA ALLA SPEDIZIONE" }));
        stato.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                statoItemStateChanged(evt);
            }
        });

        r_lbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        r_lbl.setForeground(new java.awt.Color(255, 0, 0));
        r_lbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        mod_delR.setText("ELIMINA RISERVA");
        mod_delR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mod_delRActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2)
                            .addComponent(jSeparator3)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(nomCli, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel2)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(idCli, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel3)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(stato, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(tos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel5)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(data, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jSeparator1))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(ragsocMitt, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                        .addGap(10, 10, 10)
                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(capMitt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(indMitt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                        .addGap(259, 259, 259)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel10)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(ragsocDest, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(indDest, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(capDest)))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ddtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dataCons, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ncollitxt, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(teltxt, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel18)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(voltxt, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 14, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(r_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pulisci, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(salva, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(mod_delR, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomCli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idCli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ragsocMitt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ragsocDest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(indMitt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(indDest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(capMitt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(capDest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ddtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataCons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ncollitxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(teltxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(voltxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salva)
                    .addComponent(pulisci)
                    .addComponent(r_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mod_delR, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(139, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 986, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 593, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public Mittente getMi() {
        return mi;
    }

    public void setMi(Mittente mi) {
        this.mi = mi;
    }

    public String getRagsoc() {
        return ragsoc;
    }

    public void setRagsoc(String ragsoc) {
        this.ragsoc = ragsoc;
    }

    public String getInd() {
        return ind;
    }

    public void setInd(String ind) {
        this.ind = ind;
    }

    public String getCap() {
        return cap;
    }

    public void setCap(String cap) {
        this.cap = cap;
    }

    public Boolean getB() {
        return b;
    }

    public void setB(Boolean b) {
        this.b = b;
    }

    public Spedizioni getSped() {
        return sped;
    }

    public void setSped(Spedizioni spedPar) {
        this.sped = spedPar;
        //System.out.println(sped.toString());
    }

    public void setT(Update t) {
        this.t = t;
    }

    public Update getT() {
        return t;
    }

    private void nomCliItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_nomCliItemStateChanged
        // TODO add your handling code here:
        if (nomCli.getSelectedItem() != null) {

            if (nomCli.getSelectedItem().toString().equalsIgnoreCase("altro")) {

                ragsocMitt.setText("");
                indMitt.setText("");
                capMitt.setText("");
                idCli.setText("");

                ragsocMitt.setEditable(true);
                indMitt.setEditable(true);
                capMitt.setEditable(true);
                idCli.setText("0000");
            } else {
                ragsocMitt.setEditable(false);
                indMitt.setEditable(false);
                capMitt.setEditable(false);

                for (Integer i = 0; i < clienti.size(); i++) {
                    if (nomCli.getSelectedItem().toString().equalsIgnoreCase(clienti.get(i).getRagSoc())) {
                        ragsocMitt.setText(clienti.get(i).getRagSoc());
                        indMitt.setText(clienti.get(i).getIndirizzo());
                        capMitt.setText(clienti.get(i).getCap());
                        idCli.setText(clienti.get(i).getId().toString());
                        return;
                    } else {
                        ragsocMitt.setText("");
                        indMitt.setText("");
                        capMitt.setText("");
                        idCli.setText("");
                    }
                }
            }
        }
    }//GEN-LAST:event_nomCliItemStateChanged

    private void salvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvaActionPerformed
        // controllo che tutti i campi siano ok

        try {
            if (nomCli.getSelectedItem() != null
                    && idCli.getText() != null
                    && stato.getSelectedItem() != null
                    && tos.getSelectedItem() != null
                    && data.getText() != null
                    && ragsocMitt != null
                    && indMitt.getText() != null
                    && capMitt.getText() != null
                    && ragsocDest != null
                    && indDest.getText() != null
                    && capDest.getText() != null
                    && ddtxt.getText() != null
                    && dataCons.getText() != null
                    && (ncollitxt.getText() != null && Integer.parseInt(ncollitxt.getText()) >= 0)) {

                //controllo della data
                try {
                    //data acquisizione
                    try {
                        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                        LocalDate lc = LocalDate.parse(this.checkData(data.getText()), formatter);
                        data.setText(this.checkData(data.getText()));
                    } catch (DateTimeParseException dt) {
                        Err e = new Err();
                        e.setMsgtxt("FORMATO DATA DI ACQUISIZIONE ERRATO[" + dt.getErrorIndex() + ", " + dt.getParsedString() + "]");
                        e.setVisible(true);
                    }

                    //data consegna
                    try {
                        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                        LocalDate lc = LocalDate.parse(this.checkData(dataCons.getText()), formatter);
                        dataCons.setText(this.checkData(dataCons.getText()));
                    } catch (DateTimeParseException dt) {
                        Err e = new Err();
                        e.setMsgtxt("FORMATO DATA DI CONSEGNA ERRATO [" + dt.getErrorIndex() + ", " + dt.getParsedString() + "]");
                        e.setVisible(true);
                    }
                } catch (NumberFormatException nf) {
                    Err e = new Err();
                    e.setMsgtxt("ECCEZIONE DI FORMATO");
                    e.setVisible(true);
                }

                //stato.setText("ACQUISITA");
                if (nomCli.getSelectedItem().toString().equalsIgnoreCase("altro")) {
                    Spedizioni s = new Spedizioni();
                    Cliente c = new Cliente();
                    c.setRagSoc(ragsocMitt.getText());
                    c.setIndirizzo(indMitt.getText());
                    c.setCap(capMitt.getText());
                    c.setId(Integer.parseInt(idCli.getText()));
                    ErrContatto e = new ErrContatto();
                    e.setCliente(c);
                    e.setMsgtxt("Vuoi salvare il mittente?");
                    e.setVisible(true);
                }

                //salvataggio spedizione
                String tel = "", vol = "";
                Integer idcli, idsped;
                if (teltxt.getText().isBlank()) {
                    tel = "";
                } else {
                    try {
                        tel = teltxt.getText();
                    } catch (NumberFormatException nf) {
                        Err e = new Err();
                        e.setMsgtxt("FORMATO NUMERO DI TELEFONO NON VALIDO");
                        e.setVisible(true);
                    }

                }

                if (voltxt.getText().isBlank()) {
                    vol = "";
                } else {
                    vol = voltxt.getText();
                }

                if (nomCli.getSelectedItem().toString().equalsIgnoreCase("altro")) {
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
                    LocalDate lc = LocalDate.now();
                    idcli = Integer.parseInt(lc.toString().replaceAll("-", ""));

                } else {
                    idcli = Integer.parseInt(idCli.getText());
                }
                //salvataggio spedizione nel registro generale
                this.salvaSped(idcli.toString(), stato.getSelectedItem().toString().toLowerCase(), tos.getSelectedItem().toString(), data.getText(), ragsocMitt.getText(), indMitt.getText(), capMitt.getText(), ragsocDest.getText(), indDest.getText(), capDest.getText(), ddtxt.getText(), dataCons.getText(), ncollitxt.getText(), tel, vol);

                //registro specifico
                Update t = new Update(ragsocMitt.getText().toLowerCase(), indMitt.getText().toLowerCase(), capMitt.getText(), ragsocDest.getText().toLowerCase(), indDest.getText().toLowerCase(), capDest.getText(), this.getSped().getNddt(), data.getText(), stato.getSelectedItem().toString());
                t.setIdsped(Integer.parseInt(this.getSped().getId()));
                t.start();
                this.setT(t);
            } else {
                Err e = new Err();
                e.setMsgtxt("E' NECESSRIO COMPLETARE TUTTI I CAMPI");
                e.setVisible(true);

            }
        } catch (NumberFormatException nf) {
            Err e = new Err();
            e.setMsgtxt("ERRORE GENERICO DI FORMATO ");
            e.setVisible(true);
        }

    }//GEN-LAST:event_salvaActionPerformed

    private void pulisciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pulisciActionPerformed
        // TODO add your handling code here:
        this.clearField();
    }//GEN-LAST:event_pulisciActionPerformed

    public void pulisciSetV(Boolean b) {
        pulisci.setVisible(b);
    }

    public void delRSetV(Boolean b) {
        mod_delR.setVisible(b);
    }

    public void setM(Modifica m) {
        this.mod = m;
    }

    public Modifica getM() {
        return mod;
    }

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        /*ArrayList<Cliente> c=new ArrayList<>();
        c=this.caricoClienti();*/
        //pulizia dei campi
        this.clearField();
        // aggiunta data evento
        data.setText(this.getSped().getDataAcq());

        //aggiunta data di consegna
        dataCons.setText(this.getSped().getDataCons());
        //carico clienti
        ArrayList<Cliente> app = new ArrayList<>();
        app.clear();
        app = this.caricoClienti();

        //splittaggio clienti
        nomCli.removeAllItems();
        nomCli.addItem("");
        for (Integer i = 0; i < app.size(); i++) {
            nomCli.addItem(app.get(i).getRagSoc().toUpperCase());
        }
        nomCli.addItem("Altro");
        nomCli.setSelectedItem(this.getSped().getMitt().getRagSoc().toUpperCase());

        Mittente mi = new Mittente(this.getSped().getMitt().getRagSoc(), this.getSped().getMitt().getIndirizzo(), this.getSped().getMitt().getCap(), this.getM());
        mi.setRagsoc(this.getSped().getMitt().getRagSoc());
        mi.setInd(this.getSped().getMitt().getIndirizzo());
        mi.setCap(this.getSped().getMitt().getCap());
        mi.setM(mod);
        mi.start();

        this.setMi(mi);
        //aggiunta tos
        tos.setSelectedItem(this.getSped().getTos().toUpperCase());

        //aggiunta stato
        stato.setSelectedItem(this.getSped().getStato().toUpperCase());

        //aggiunta intestazione destinatario
        ragsocDest.setText(this.getSped().getDest().getRagSoc().toUpperCase());
        indDest.setText(this.getSped().getDest().getIndirizzo().toUpperCase());
        capDest.setText(this.getSped().getDest().getCap());

        //aggiunta nddt
        ddtxt.setText(this.getSped().getNddt());

        //aggiunta ncolli
        ncollitxt.setText(this.getSped().getNc().toString());

        //aggiunta telefono
        teltxt.setText(this.getSped().getTel());

        //aggiunta volume
        voltxt.setText(this.getSped().getVol());

        //controllo se la spedizione è una riserva attraverso un th
        this.ris();
    }

    public void ris() {
        CheckR cr = new CheckR(Integer.parseInt(this.getSped().getId()), this.getSped().getNddt());
        cr.start();
        if (cr.cerca(Integer.parseInt(this.getSped().getId()), this.getSped().getNddt())) {
            r_lbl.setText("! RISERVA INSERITA !");
            mod_delR.setVisible(true);
        } else {
            r_lbl.setText("");
            mod_delR.setVisible(false);
        }


    }//GEN-LAST:event_formComponentShown

    public CheckR getCr() {
        return cr;
    }

    public void setCr(CheckR cr) {
        this.cr = cr;
    }


    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        JFrame frame = new JFrame();
        try {
            try {
                if (this.getT().isAlive() || this.getCr().isAlive() || this.getMi().isAlive()) {

                    frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                    this.getT().join();
                    this.getCr().join();
                    this.getMi().join();
                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                    try {
                        conn.close();
                    } catch (SQLException sql) {
                        Err e = new Err();
                        e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
                        e.setVisible(true);
                    }
                    System.exit(0);
                }
            } catch (InterruptedException ie) {
                try {
                    conn.close();
                } catch (SQLException sql) {
                    Err e = new Err();
                    e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
                    e.setVisible(true);
                }
                ie.printStackTrace();
            }
        } catch (NullPointerException np) {
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        }
    }//GEN-LAST:event_formWindowClosing

    private void statoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_statoItemStateChanged
        // TODO add your handling code here:
        ns++;

        if (ns > 1) {
            data.setText(this.today());
        }
    }//GEN-LAST:event_statoItemStateChanged

    private void mod_delRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mod_delRActionPerformed
        // TODO add your handling code here:
        String query = "DELETE FROM riserve WHERE nddt=?";

        try {
            conn = DriverManager.getConnection(url, user, pass);

            PreparedStatement state = conn.prepareStatement(query);
            state.setString(1, ddtxt.getText());
            state.executeUpdate();
            this.ris();
            conn.close();
        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }
    }//GEN-LAST:event_mod_delRActionPerformed

    private void jPanel1ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel1ComponentShown
        // TODO add your handling code here:
        if (stato.getSelectedItem() != null
                && tos.getSelectedItem() != null
                && data.getText() != null
                && ragsocMitt != null
                && indMitt.getText() != null
                && capMitt.getText() != null
                && ragsocDest != null
                && indDest.getText() != null
                && capDest.getText() != null
                && ddtxt.getText() != null
                && dataCons.getText() != null
                && (ncollitxt.getText() != null && Integer.parseInt(ncollitxt.getText()) >= 0)) {

            nomCli.setSelectedItem("Altro");
            idCli.setText("0000");
        }
    }//GEN-LAST:event_jPanel1ComponentShown

    public void salvaSped(String idCli, String stato, String tos, String dataAcq, String ragSocMitt, String indMitt, String capMitt, String ragSocDest, String indDest, String capDest, String nddt, String dataCons, String ncolli, String tel, String vol) {
        String f = "stato";
        try {

            String query = "UPDATE spedizioni SET id_cli=?,stato=?,tos=?,data_acq=?,ragsocmitt=?,ind_mitt=?,cap_mitt=?,ragsoc_dest=?,ind_dest=?,cap_dest=?,nddt=?,data_cons=?,ncolli=?,tel=?,vol=? WHERE id=?";

            conn = DriverManager.getConnection(url, user, pass);

            PreparedStatement state = conn.prepareStatement(query);

            state.setString(1, idCli);
            state.setString(2, stato.toLowerCase());
            state.setString(3, tos.toLowerCase());
            state.setString(4, dataAcq);
            state.setString(5, ragSocMitt.toLowerCase());
            state.setString(6, indMitt.toLowerCase());
            state.setString(7, capMitt);
            state.setString(8, ragSocDest.toLowerCase());
            state.setString(9, indDest.toLowerCase());
            state.setString(10, capDest);
            state.setString(11, nddt);
            state.setString(12, dataCons);
            state.setString(13, ncolli);
            state.setString(14, tel);
            state.setString(15, vol);
            state.setInt(16, Integer.parseInt(this.getSped().getId()));

            state.executeUpdate();
            conn.close();
        } catch (SQLException sql) {

            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }
    }

    public ArrayList<Cliente> caricoClienti() {
        nomCli.removeAllItems();
        nomCli.addItem("");
        clienti.clear();

        try {
            conn = DriverManager.getConnection(url, user, pass);
            String query = "SELECT * FROM clienti";
            Statement state = conn.createStatement();
            ResultSet ris = state.executeQuery(query);

            while (ris.next()) {
                Cliente c = new Cliente();
                c.setRagSoc(ris.getString("nome").toUpperCase());
                c.setIndirizzo(ris.getString("indirizzo").toUpperCase());
                c.setCap(ris.getString("cap"));
                c.setId(ris.getInt("id"));
                clienti.add(c);
                //nomCli.addItem(c.getRagSoc().toUpperCase());
            }
            //nomCli.addItem("Altro");

        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }
        return clienti;
    }

    public void clearField() {
        nomCli.setSelectedItem("");
        stato.setSelectedItem("");
        ragsocMitt.setText("");
        indMitt.setText("");
        capMitt.setText("");
        idCli.setText("");
        ragsocDest.setText("");
        indDest.setText("");
        capDest.setText("");
        ddtxt.setText("");
        dataCons.setText("");
        ncollitxt.setText("");
        teltxt.setText("");
        voltxt.setText("");
    }

    public String checkData(String datatxt) {
        String data = "", app[] = datatxt.split("-");
        Boolean b = false;

        if (Integer.parseInt(app[0]) < 10 && app[0].length() < 2) {
            b = true;
            data = "0" + app[0] + "-" + app[1] + "-" + app[2];
        }

        if (Integer.parseInt(app[1]) < 10 && app[1].length() < 2) {
            b = true;
            data = app[0] + "-0" + app[1] + "-" + app[2];
        }

        if ((Integer.parseInt(app[1]) < 10 && app[1].length() < 2) && (Integer.parseInt(app[0]) < 10 && app[0].length() < 2)) {
            b = true;
            data = "0" + app[0] + "-0" + app[1] + "-" + app[2];
        }

        if (!b) {
            data = app[0] + "-" + app[1] + "-" + app[2];
        }

        return data;
    }

    public String tomorrow() {
        LocalDate domani;
        String data = null;
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
            LocalDate lc = LocalDate.parse(this.checkData(this.today()), formatter);
            domani = lc.plusDays(1);
            data = this.checkData(domani.getDayOfMonth() + "-" + domani.getMonthValue() + "-" + domani.getYear());
            dataCons.setText(data);
        } catch (DateTimeParseException dt) {
            Err e = new Err();
            e.setMsgtxt("FORMATO DATA DI CONSEGNA ERRATO [" + dt.getErrorIndex() + ", " + dt.getParsedString() + "]");
            e.setVisible(true);
        }
        return data;
    }

    public String today() {
        LocalDate lc = LocalDate.now();
        String data = "";
        Boolean b = false;

        if (lc.getDayOfMonth() < 10) {
            b = true;
            data = "0" + lc.getDayOfMonth() + "-" + lc.getMonthValue() + "-" + lc.getYear();
        }

        if (lc.getMonthValue() < 10) {
            b = true;
            data = lc.getDayOfMonth() + "-0" + lc.getMonthValue() + "-" + lc.getYear();
        }
        if (!b) {
            data = lc.getDayOfMonth() + "-" + lc.getMonthValue() + "-" + lc.getYear();
        }

        return data;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Modifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Modifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Modifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Modifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Modifica().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField capDest;
    public javax.swing.JTextField capMitt;
    private javax.swing.JTextField data;
    private javax.swing.JTextField dataCons;
    private javax.swing.JTextField ddtxt;
    private javax.swing.JTextField idCli;
    private javax.swing.JTextField indDest;
    public javax.swing.JTextField indMitt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton mod_delR;
    private javax.swing.JTextField ncollitxt;
    private javax.swing.JComboBox<String> nomCli;
    private javax.swing.JButton pulisci;
    private javax.swing.JLabel r_lbl;
    private javax.swing.JTextField ragsocDest;
    public javax.swing.JTextField ragsocMitt;
    private javax.swing.JButton salva;
    private javax.swing.JComboBox<String> stato;
    private javax.swing.JTextField teltxt;
    private javax.swing.JComboBox<String> tos;
    private javax.swing.JTextField voltxt;
    // End of variables declaration//GEN-END:variables
}
