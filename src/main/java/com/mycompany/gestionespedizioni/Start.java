/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.gestionespedizioni;

import java.awt.Dimension;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author caggi
 */
public class Start extends javax.swing.JFrame {

    Connection conn = null;
    String url = "jdbc:postgresql://localhost/gestioneSpedizioni";
    String user = "postgres";
    String pass = "root";
    private ArrayList<Cliente> clienti = new ArrayList<Cliente>();
    private ArrayList<Cliente> app = new ArrayList<Cliente>();
    private ArrayList<Spedizioni> sped = new ArrayList<Spedizioni>();
    private ArrayList<Autisti> autisti = new ArrayList<Autisti>();
    private ArrayList<Macchina> mac = new ArrayList<Macchina>();
    private ArrayList<Associazione> ass = new ArrayList<Associazione>();
    private Multithreading t;
    private Update u;
    private Riserva r;
    private ThOp th;
    private Modifica mod;
    private SalvaZone sz;
    private Boolean autReg;
    private ArrayList<Autisti> a = new ArrayList<Autisti>();
    private Cliente c;
    private Macchina m;
    private String targa;
    private Autisti auttodel;
    private ArrayList<Autisti> passA;
    private MaccOp macc;
    private Autisti autPassato;
    private AggAut agga;
    String v = "1.0";
    String swe = "CAGGIANI ANDREA";

    /**
     * Creates new form Autisti
     */
    public Start() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane11 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nomCli = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        idCli = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        stato = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tos = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        data = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ragsocMitt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        indMitt = new javax.swing.JTextField();
        capMitt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        ragsocDest = new javax.swing.JTextField();
        indDest = new javax.swing.JTextField();
        capDest = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        ddtxt = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        dataCons = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel16 = new javax.swing.JLabel();
        ncollitxt = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        teltxt = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        voltxt = new javax.swing.JTextField();
        salva = new javax.swing.JButton();
        pulisci = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jlabel22 = new javax.swing.JLabel();
        mod_nddt = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        jlabel23 = new javax.swing.JLabel();
        jlabel24 = new javax.swing.JLabel();
        jlabel25 = new javax.swing.JLabel();
        jlabel26 = new javax.swing.JLabel();
        mod_cap_mitt = new javax.swing.JTextField();
        mod_ragsoc_mitt = new javax.swing.JTextField();
        mod_ind_mitt = new javax.swing.JTextField();
        jlabel27 = new javax.swing.JLabel();
        mod_ragsoc_dest = new javax.swing.JTextField();
        jlabel28 = new javax.swing.JLabel();
        jlabel29 = new javax.swing.JLabel();
        jlabel30 = new javax.swing.JLabel();
        mod_ind_dest = new javax.swing.JTextField();
        mod_cap_dest = new javax.swing.JTextField();
        jSeparator5 = new javax.swing.JSeparator();
        jlabel31 = new javax.swing.JLabel();
        mod_acq = new javax.swing.JTextField();
        jSeparator6 = new javax.swing.JSeparator();
        jlabel32 = new javax.swing.JLabel();
        mod_cons = new javax.swing.JTextField();
        radioDdt = new javax.swing.JRadioButton();
        radioIntestazioni = new javax.swing.JRadioButton();
        radioAcq = new javax.swing.JRadioButton();
        radioCons = new javax.swing.JRadioButton();
        mod_cli = new javax.swing.JComboBox<>();
        jlabel33 = new javax.swing.JLabel();
        mod_id_mitt = new javax.swing.JTextField();
        mod_cerca = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tab = new javax.swing.JTable();
        mod_ispeziona = new javax.swing.JButton();
        mod_elimina = new javax.swing.JButton();
        mod_giacenza = new javax.swing.JButton();
        mod_riserva = new javax.swing.JButton();
        mod_storico = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        dataPick = new javax.swing.JComboBox<>();
        elabPick = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        dataBord = new javax.swing.JComboBox<>();
        ottieniBord = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        rifMacc = new javax.swing.JLabel();
        rifMacc1 = new javax.swing.JLabel();
        rifMacc2 = new javax.swing.JLabel();
        autista = new javax.swing.JComboBox<>();
        nomeMacc = new javax.swing.JTextField();
        targaMacc = new javax.swing.JTextField();
        salvaMacc = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        nometxt = new javax.swing.JTextField();
        cognometxt = new javax.swing.JTextField();
        dtntxt = new javax.swing.JTextField();
        sesso = new javax.swing.JComboBox<>();
        aggZ = new javax.swing.JButton();
        separator = new javax.swing.JSeparator();
        nomeloclbl = new javax.swing.JLabel();
        caploclbl = new javax.swing.JLabel();
        nomeLoc = new javax.swing.JTextField();
        capLoc = new javax.swing.JTextField();
        salvaZ = new javax.swing.JButton();
        salvaAut = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        ragSoc = new javax.swing.JTextField();
        indirizzo = new javax.swing.JTextField();
        cap = new javax.swing.JTextField();
        salvaContatto = new javax.swing.JButton();
        tabRicBord = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        modCli = new javax.swing.JComboBox<>();
        jLabel29 = new javax.swing.JLabel();
        mod_ragsocMitt = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        mod_indMitt = new javax.swing.JTextField();
        mod_capMitt = new javax.swing.JTextField();
        eliminaCli = new javax.swing.JButton();
        aggiornaCli = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        rifMacc3 = new javax.swing.JLabel();
        rifMacc4 = new javax.swing.JLabel();
        rifMacc5 = new javax.swing.JLabel();
        mod_autista = new javax.swing.JComboBox<>();
        mod_nomeMacc = new javax.swing.JTextField();
        mod_targaMacc = new javax.swing.JTextField();
        macchina = new javax.swing.JComboBox<>();
        rifMacc7 = new javax.swing.JLabel();
        aggMacc = new javax.swing.JButton();
        modMacDel = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        mod_cognometxt = new javax.swing.JTextField();
        mod_dtntxt = new javax.swing.JTextField();
        mod_nometxt = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        mod_sesso = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabModAut = new javax.swing.JTable();
        aggLoc = new javax.swing.JButton();
        cancLoc = new javax.swing.JButton();
        salvaModAut = new javax.swing.JButton();
        jLabel36 = new javax.swing.JLabel();
        autDisp = new javax.swing.JComboBox<>();
        elimAut = new javax.swing.JButton();
        agg = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        ric_dt = new javax.swing.JTextField();
        ricPick = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ricPickTab = new javax.swing.JTable();
        ricPick1 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jLabel40 = new javax.swing.JLabel();
        dtRicB = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        cbRicB = new javax.swing.JComboBox<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabBord = new javax.swing.JTable();
        ricB = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jLabel42 = new javax.swing.JLabel();
        dtServ = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        servTab = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        verslbl = new javax.swing.JLabel();
        swelbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DELIVERING");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel1ComponentShown(evt);
            }
        });

        jLabel1.setText("NOMINTIVO MITTENTE");

        nomCli.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                nomCliItemStateChanged(evt);
            }
        });

        jLabel2.setText("ID CLIENTE");

        idCli.setEditable(false);

        jLabel3.setText("STATO");

        stato.setEditable(false);

        jLabel4.setText("TIPO SERV");

        tos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SPEDIZIONE", "RITIRO" }));

        jLabel5.setText("DATA");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("MITTENTE");

        jLabel7.setText("RAG. SOCIALE");

        ragsocMitt.setEditable(false);
        ragsocMitt.setNextFocusableComponent(indMitt);

        jLabel8.setText("INDIRIZZO");

        jLabel9.setText("CAP");

        indMitt.setEditable(false);
        indMitt.setNextFocusableComponent(capMitt);

        capMitt.setEditable(false);
        capMitt.setNextFocusableComponent(ragsocDest);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("DESTINATARIO");

        jLabel11.setText("RAG. SOCIALE");

        jLabel12.setText("INDIRIZZO");

        jLabel13.setText("CAP");

        ragsocDest.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        ragsocDest.setNextFocusableComponent(indDest);

        indDest.setNextFocusableComponent(capDest);

        jLabel14.setText("N. DDT");

        jLabel15.setText("DATA CONSEGNA");

        jLabel16.setText("N. COLLI");

        jLabel17.setText("TEL");

        jLabel18.setText("VOL");

        salva.setText("SALVA");
        salva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvaActionPerformed(evt);
            }
        });

        pulisci.setText("PULISCI");
        pulisci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pulisciActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addComponent(jSeparator3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(nomCli, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(idCli, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(stato, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(tos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(data, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jSeparator1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(ragsocMitt, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(capMitt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(indMitt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                .addGap(259, 259, 259)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel10)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(ragsocDest, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(indDest, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(capDest)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ddtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dataCons, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ncollitxt, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(teltxt, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(voltxt, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 47, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pulisci, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(salva, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomCli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idCli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ragsocMitt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ragsocDest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(indMitt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(indDest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(capMitt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(capDest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ddtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataCons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ncollitxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(teltxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(voltxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salva)
                    .addComponent(pulisci))
                .addContainerGap(219, Short.MAX_VALUE))
        );

        jTabbedPane11.addTab("| INSERISCI SERVIZIO |", jPanel1);

        jPanel2.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel2ComponentShown(evt);
            }
        });

        jlabel22.setText("N. DDT");

        jlabel23.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlabel23.setText("MITTENTE");

        jlabel24.setText("RAG. SOCIALE");

        jlabel25.setText("INDIRIZZO");

        jlabel26.setText("CAP");

        jlabel27.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlabel27.setText("DESTINATARIO");

        mod_ragsoc_dest.setNextFocusableComponent(mod_ind_dest);

        jlabel28.setText("RAG. SOCIALE");

        jlabel29.setText("INDIRIZZO");

        jlabel30.setText("CAP");

        mod_ind_dest.setNextFocusableComponent(mod_cap_dest);

        jlabel31.setText("DATA DI ACQUISIZIONE");

        jlabel32.setText("DATA DI CONSEGNA");

        radioDdt.setText("N. DDT");
        radioDdt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioDdtActionPerformed(evt);
            }
        });

        radioIntestazioni.setText("INTESTAZIONE MITTENTE+DESTINATARIO");
        radioIntestazioni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioIntestazioniActionPerformed(evt);
            }
        });

        radioAcq.setText("DATA ACQUISIZIONE");
        radioAcq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioAcqActionPerformed(evt);
            }
        });

        radioCons.setText("DATA CONSEGNA");
        radioCons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioConsActionPerformed(evt);
            }
        });

        mod_cli.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mod_cliItemStateChanged(evt);
            }
        });

        jlabel33.setText("ID");

        mod_id_mitt.setEditable(false);

        mod_cerca.setText("CERCA");
        mod_cerca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mod_cercaActionPerformed(evt);
            }
        });

        tab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID SPED.", "MITT", "DEST", "DDT", "TEL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tab);

        mod_ispeziona.setText("ISPEZIONA");
        mod_ispeziona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mod_ispezionaActionPerformed(evt);
            }
        });

        mod_elimina.setText("ELIMINA");
        mod_elimina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mod_eliminaActionPerformed(evt);
            }
        });

        mod_giacenza.setText("GIACENZA");
        mod_giacenza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mod_giacenzaActionPerformed(evt);
            }
        });

        mod_riserva.setText("RISERVA");
        mod_riserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mod_riservaActionPerformed(evt);
            }
        });

        mod_storico.setText("STORICO");
        mod_storico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mod_storicoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jlabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mod_nddt, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(radioDdt)
                                .addGap(24, 24, 24))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jlabel23)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(mod_cli, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jlabel26, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jlabel25, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jlabel24, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(mod_ind_mitt, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(mod_cap_mitt, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(mod_ragsoc_mitt, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jlabel33)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mod_id_mitt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jlabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jlabel29, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jlabel30, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(mod_ind_dest, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(mod_cap_dest, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(mod_ragsoc_dest, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jlabel27)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 328, Short.MAX_VALUE)
                                                .addComponent(radioIntestazioni))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(radioAcq)))
                                        .addGap(16, 16, 16))))
                            .addComponent(jSeparator4)
                            .addComponent(jSeparator6)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jlabel31)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mod_acq, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator5))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jlabel32)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mod_cons, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 803, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(mod_cerca, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(radioCons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(mod_ispeziona, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(mod_elimina, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(mod_giacenza, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(mod_riserva, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(mod_storico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(14, 14, 14))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jlabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(radioDdt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mod_nddt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radioIntestazioni)
                            .addComponent(mod_cli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mod_id_mitt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mod_ragsoc_mitt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mod_ragsoc_dest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mod_ind_mitt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mod_ind_dest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jlabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(mod_cap_dest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(mod_cap_mitt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioAcq)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mod_acq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mod_cons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radioCons))))
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(mod_cerca)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mod_ispeziona)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mod_giacenza)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mod_riserva)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mod_storico))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addComponent(mod_elimina)
                .addGap(21, 21, 21))
        );

        jTabbedPane11.addTab("MODIFICA SERVIZIO", jPanel2);

        jPanel6.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel6ComponentShown(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel26.setText("DATA");

        elabPick.setText("ELABORA");
        elabPick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elabPickActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(elabPick, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dataPick, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(767, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataPick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(elabPick)
                .addContainerGap(531, Short.MAX_VALUE))
        );

        jTabbedPane11.addTab("CREA PICKERLIST", jPanel6);

        jPanel7.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel7ComponentShown(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel27.setText("DATA");

        ottieniBord.setText("OTTIENI");
        ottieniBord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ottieniBordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dataBord, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ottieniBord, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(767, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataBord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(ottieniBord)
                .addContainerGap(531, Short.MAX_VALUE))
        );

        jTabbedPane11.addTab("CREA BORDERO'", jPanel7);

        jPanel8.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel8ComponentShown(evt);
            }
        });

        rifMacc.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rifMacc.setText("NOME MACCHINA");

        rifMacc1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rifMacc1.setText("TARGA");

        rifMacc2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rifMacc2.setText("AUTISTA");

        nomeMacc.setNextFocusableComponent(targaMacc);

        salvaMacc.setText("SALVA");
        salvaMacc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvaMaccActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rifMacc1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rifMacc, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(nomeMacc, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                        .addComponent(rifMacc2, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(autista, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(179, 179, 179))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(targaMacc, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(salvaMacc, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rifMacc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rifMacc2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(autista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomeMacc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rifMacc1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(targaMacc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addComponent(salvaMacc)
                .addContainerGap(444, Short.MAX_VALUE))
        );

        jTabbedPane11.addTab("AGGIUNGI MACCHINA", jPanel8);

        jPanel9.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel9ComponentShown(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel22.setText("DATA DI NASCITA");

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel23.setText("COGNOME");

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel24.setText("NOME");

        jLabel25.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel25.setText("SESSO");

        nometxt.setNextFocusableComponent(cognometxt);

        cognometxt.setNextFocusableComponent(dtntxt);

        dtntxt.setNextFocusableComponent(sesso);

        sesso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "M", "F" }));
        sesso.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sessoFocusGained(evt);
            }
        });

        aggZ.setText("AGGIUNGI ZONA");
        aggZ.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        aggZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggZActionPerformed(evt);
            }
        });

        nomeloclbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        nomeloclbl.setText("NOME LOC.");

        caploclbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        caploclbl.setText("CAP LOC.");

        nomeLoc.setNextFocusableComponent(capLoc);

        capLoc.setNextFocusableComponent(cognometxt);

        salvaZ.setText("SALVA ZONA");
        salvaZ.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        salvaZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvaZActionPerformed(evt);
            }
        });

        salvaAut.setText("SALVA AUTISTA");
        salvaAut.setNextFocusableComponent(aggZ);
        salvaAut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvaAutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(separator)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(nomeloclbl, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nomeLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(caploclbl, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(capLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                                    .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nometxt, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cognometxt, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(46, 46, 46)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel9Layout.createSequentialGroup()
                                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel9Layout.createSequentialGroup()
                                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dtntxt, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 176, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(salvaZ)
                    .addComponent(aggZ)
                    .addComponent(salvaAut))
                .addGap(43, 43, 43))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nometxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dtntxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cognometxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salvaAut))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(aggZ, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nomeloclbl, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nomeLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(caploclbl, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(capLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(salvaZ, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(390, Short.MAX_VALUE))
        );

        jTabbedPane11.addTab("AGGIUNGI AUTISTA", jPanel9);

        jLabel19.setText("RAG. SOCIALE");

        jLabel20.setText("INDIRIZZO");

        jLabel21.setText("CAP");

        salvaContatto.setText("SALVA");
        salvaContatto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvaContattoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ragSoc, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(indirizzo, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cap, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(714, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(salvaContatto, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ragSoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(indirizzo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 378, Short.MAX_VALUE)
                .addComponent(salvaContatto)
                .addGap(117, 117, 117))
        );

        jTabbedPane11.addTab("AGGIUNGI CLIENTE", jPanel10);

        jPanel3.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel3ComponentShown(evt);
            }
        });

        jLabel28.setText("NOMINTIVO MITTENTE");

        modCli.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                modCliItemStateChanged(evt);
            }
        });

        jLabel29.setText("RAG. SOCIALE");

        mod_ragsocMitt.setNextFocusableComponent(indMitt);

        jLabel30.setText("INDIRIZZO");

        jLabel31.setText("CAP");

        mod_indMitt.setNextFocusableComponent(capMitt);

        mod_capMitt.setNextFocusableComponent(ragsocDest);

        eliminaCli.setText("ELIMINA");
        eliminaCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminaCliActionPerformed(evt);
            }
        });

        aggiornaCli.setText("AGGIORNA");
        aggiornaCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggiornaCliActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modCli, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel29))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(mod_ragsocMitt, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mod_capMitt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mod_indMitt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(eliminaCli, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aggiornaCli)))
                .addContainerGap(701, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(modCli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mod_ragsocMitt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mod_indMitt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mod_capMitt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eliminaCli)
                    .addComponent(aggiornaCli))
                .addContainerGap(374, Short.MAX_VALUE))
        );

        tabRicBord.addTab("MOD. CLIENTE", jPanel3);

        jPanel4.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel4ComponentShown(evt);
            }
        });

        rifMacc3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rifMacc3.setText("NOME MACCHINA");

        rifMacc4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rifMacc4.setText("TARGA");

        rifMacc5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rifMacc5.setText("AUTISTA");

        mod_autista.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mod_autistaItemStateChanged(evt);
            }
        });

        mod_nomeMacc.setNextFocusableComponent(targaMacc);

        macchina.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                macchinaItemStateChanged(evt);
            }
        });

        rifMacc7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rifMacc7.setText("MACCHINA");

        aggMacc.setText("AGGIORNA");
        aggMacc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggMaccActionPerformed(evt);
            }
        });

        modMacDel.setText("ELIMINA");
        modMacDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modMacDelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(rifMacc4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rifMacc3, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(mod_nomeMacc, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(rifMacc5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mod_autista, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(222, 222, 222))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(mod_targaMacc, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(626, 626, 626))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(rifMacc7, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(macchina, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(modMacDel, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(aggMacc)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(macchina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rifMacc7, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rifMacc3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rifMacc5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mod_autista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mod_nomeMacc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rifMacc4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mod_targaMacc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modMacDel)
                    .addComponent(aggMacc))
                .addContainerGap(412, Short.MAX_VALUE))
        );

        tabRicBord.addTab("MOD. MACCHINA", jPanel4);

        jPanel5.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel5ComponentShown(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel32.setText("AUTISTA");

        mod_cognometxt.setNextFocusableComponent(dtntxt);

        mod_dtntxt.setNextFocusableComponent(sesso);

        mod_nometxt.setNextFocusableComponent(cognometxt);

        jLabel33.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel33.setText("DATA DI NASCITA");

        jLabel34.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel34.setText("NOME");

        jLabel35.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel35.setText("SESSO");

        mod_sesso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "M", "F" }));
        mod_sesso.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mod_sessoFocusGained(evt);
            }
        });

        tabModAut.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Località", "CAP"
            }
        ));
        jScrollPane2.setViewportView(tabModAut);

        aggLoc.setText("+ LOCALITA'");
        aggLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggLocActionPerformed(evt);
            }
        });

        cancLoc.setText("-  LOCALITA'");
        cancLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancLocActionPerformed(evt);
            }
        });

        salvaModAut.setText("SALVA MODIFICHE");
        salvaModAut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                salvaModAutMouseEntered(evt);
            }
        });
        salvaModAut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvaModAutActionPerformed(evt);
            }
        });

        jLabel36.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel36.setText("COGNOME");

        autDisp.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                autDispItemStateChanged(evt);
            }
        });

        elimAut.setText("ELIMINA AUTISTA");
        elimAut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elimAutActionPerformed(evt);
            }
        });

        agg.setText("AGG.");
        agg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 776, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(aggLoc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cancLoc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(salvaModAut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(elimAut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mod_nometxt, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mod_cognometxt, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mod_sesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mod_dtntxt, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(autDisp, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(agg)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(autDisp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(agg))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mod_nometxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mod_dtntxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mod_cognometxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mod_sesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(aggLoc)
                        .addGap(18, 18, 18)
                        .addComponent(cancLoc)
                        .addGap(18, 18, 18)
                        .addComponent(salvaModAut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(elimAut)))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        tabRicBord.addTab("MOD. AUTISTA", jPanel5);

        jPanel11.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel11ComponentShown(evt);
            }
        });

        jLabel37.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel37.setText("DATA EMISSIONE PICKERLIST");

        ric_dt.setNextFocusableComponent(sesso);

        ricPick.setText("CERCA");
        ricPick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ricPickActionPerformed(evt);
            }
        });

        ricPickTab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "DDT", "MITT", "CAP", "DEST", "CAP", "N COLLI", "TARGA", "NOME", "AUTISTA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(ricPickTab);

        ricPick1.setText("ELIMINA");
        ricPick1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ricPick1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ric_dt, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(ricPick, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ricPick1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 403, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ric_dt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ricPick)
                    .addComponent(ricPick1))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(83, Short.MAX_VALUE))
        );

        tabRicBord.addTab("RICERCA PICKERLIST", jPanel11);

        jPanel12.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel12ComponentShown(evt);
            }
        });

        jLabel40.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel40.setText("DATA BORDERO");

        dtRicB.setNextFocusableComponent(sesso);

        jLabel41.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel41.setText("AUTISTA");

        tabBord.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TOS", "DDT", "N COLLI", "MITT", "INDIRIZZO", "DEST", "INDIRIZZO", "TEL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tabBord);

        ricB.setText("CERCA");
        ricB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ricBActionPerformed(evt);
            }
        });

        jButton2.setText("ELIMINA");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbRicB, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dtRicB, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(85, 85, 85)
                                .addComponent(ricB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)))
                        .addGap(0, 459, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbRicB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dtRicB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ricB)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        tabRicBord.addTab("RICERCA BORDERO", jPanel12);

        jPanel14.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel14ComponentShown(evt);
            }
        });

        jLabel42.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel42.setText("DATA SERVIZI");

        dtServ.setNextFocusableComponent(sesso);

        jButton1.setText("CERCA");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        servTab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TOS", "MITT", "CAP", "DEST", "CAP"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(servTab);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dtServ, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 997, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dtServ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        tabRicBord.addTab("SERVIZI IN GIORNATA", jPanel14);

        jTabbedPane11.addTab("TOOLS", tabRicBord);

        jPanel13.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel13ComponentShown(evt);
            }
        });

        jLabel38.setText("VERSIONE");

        jLabel39.setText("SOFTWARE ENGINEER");

        verslbl.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N

        swelbl.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(verslbl, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                        .addGap(772, 772, 772))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jLabel39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(swelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(verslbl, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(swelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(537, Short.MAX_VALUE))
        );

        jTabbedPane11.addTab("ABOUT", jPanel13);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane11)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane11)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public MaccOp getMacc() {
        return macc;
    }

    public void setMacc(MaccOp macc) {
        this.macc = macc;
    }

    public ArrayList<Associazione> getAss() {
        return ass;
    }

    public void setAss(ArrayList<Associazione> ass) {
        this.ass = ass;
    }

    public ArrayList<Macchina> getMac() {
        return mac;
    }

    public void setMac(ArrayList<Macchina> mac) {
        this.mac = mac;
    }

    public ArrayList<Autisti> getAutisti() {
        return autisti;
    }

    public void setAutisti(ArrayList<Autisti> autisti) {
        this.autisti = autisti;
    }

    public Boolean getAutReg() {
        return autReg;
    }

    public void setAutReg(Boolean autReg) {
        this.autReg = autReg;
    }

    public SalvaZone getSz() {
        return sz;
    }

    public void setSz(SalvaZone sz) {
        this.sz = sz;
    }

    public Riserva getR() {
        return r;
    }

    public void setR(Riserva r) {
        this.r = r;
    }

    public void setU(Update u) {
        this.u = u;
    }

    public Update getU() {
        return u;
    }

    public void setApp(ArrayList<Cliente> c) {
        this.app = c;
    }

    public ArrayList<Cliente> getApp() {
        return app;
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        JFrame frame = new JFrame();
        try {
            try {
                if (this.getT().isAlive() || this.getU().isAlive() || this.getR().isAlive() || this.getTh().isAlive()
                        || this.getSz().isAlive() || this.getMacc().isAlive() || this.getAggAut().isAlive()) {

                    frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                    this.getT().join();
                    this.getU().join();
                    this.getR().join();
                    this.getTh().join();
                    this.getSz().join();
                    this.getMacc().join();
                    this.getAggAut().join();
                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                    try {
                        conn.close();
                    } catch (SQLException sql) {
                        Err e = new Err();
                        e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
                        e.setVisible(true);
                    }
                    System.exit(0);
                }
            } catch (InterruptedException ie) {
                try {
                    conn.close();
                } catch (SQLException sql) {
                    Err e = new Err();
                    e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
                    e.setVisible(true);
                }
                ie.printStackTrace();
            }
        } catch (NullPointerException np) {
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        }
    }//GEN-LAST:event_formWindowClosing

    private void salvaContattoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvaContattoActionPerformed
        // TODO add your handling code here:
        if (ragSoc.getText() != null
                && indirizzo.getText() != null
                && cap.getText() != null) {

            try {
                Integer.parseInt(cap.getText());
            } catch (NumberFormatException nf) {
                Err e = new Err();
                e.setMsgtxt("FORMATO ERRATO");
                e.setVisible(true);
            }
            try {
                conn = DriverManager.getConnection(url, user, pass);

                try {
                    this.querySalvaCont(ragSoc.getText(), indirizzo.getText(), Integer.parseInt(cap.getText()), conn);
                } catch (NumberFormatException nf) {
                    Err e = new Err();
                    e.setMsgtxt("PROBABILMENTE IL CAP HA UN FORMATO ERRATO [" + nf.getCause() + "]");
                    e.setVisible(true);
                }

            } catch (SQLException sql) {
                Err e = new Err();
                e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
                e.setVisible(true);
            }

            this.clearCont();

        } else {
            Err e = new Err();
            e.setMsgtxt("E' NECESSRIO COMPLETARE TUTTI I CAMPI");
            e.setVisible(true);
        }
    }//GEN-LAST:event_salvaContattoActionPerformed

    private void jPanel9ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel9ComponentShown
        // TODO add your handling code here:
        //oscuro visibilita dei componenti della zona
        aggZ.setVisible(false);
        this.compAut(false);

        //pulisco tutti i campi
        this.pulisciAut();
    }//GEN-LAST:event_jPanel9ComponentShown

    private void salvaAutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvaAutActionPerformed
        // TODO add your handling code here:
        //controllo se tutti i campi sono completati
        if (nometxt.getText() != null
                && cognometxt.getText() != null
                && dtntxt.getText() != null) {
            try {
                //controllo la data
                try {
                    try {
                        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                        LocalDate lc = LocalDate.parse(this.checkData(dtntxt.getText()), formatter);

                        dtntxt.setText(this.checkData(dtntxt.getText()));
                        //memorizzo l'autista nella tabella generale
                        this.salvaAut(nometxt.getText().toLowerCase(), cognometxt.getText().toLowerCase(), this.checkData(dtntxt.getText().toLowerCase()), sesso.getSelectedItem().toString().toLowerCase(), "disponibile");
                        this.setAutReg(true);

                        if (this.getAutReg()) {
                            aggZ.setVisible(true);
                        }
                    } catch (ArrayIndexOutOfBoundsException ai) {
                        Err e = new Err();
                        e.setMsgtxt("FORMATO ERRATO");
                        e.setVisible(true);
                    }
                } catch (DateTimeParseException dt) {
                    Err e = new Err();
                    e.setMsgtxt("FORMATO DATA ERRATO");
                    e.setVisible(true);
                }

            } catch (NumberFormatException nf) {
                Err e = new Err();
                e.setMsgtxt("FORMATO ERRATO");
                e.setVisible(true);
            }
        } else {
            Err e = new Err();
            e.setMsgtxt("E' NECESSARIO COMPILARE TUTTI I CAMPI");
            e.setVisible(true);
        }
    }//GEN-LAST:event_salvaAutActionPerformed

    private void salvaZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvaZActionPerformed
        // TODO add your handling code here:
        //mi assicuro che i campi di localita e cap siano compilati
        if (nomeLoc.getText() != null && capLoc.getText() != null) {
            try {
                SalvaZone sz = new SalvaZone();
                this.setSz(sz);
                sz.setB(true);
                sz.setNome(nometxt.getText().toLowerCase());
                sz.setCognome(cognometxt.getText().toLowerCase());
                sz.setDn(dtntxt.getText());
                sz.setLoc(nomeLoc.getText().toLowerCase());
                sz.setCap(capLoc.getText().toLowerCase());
                sz.start();
            } catch (NumberFormatException nf) {
                Err e = new Err();
                e.setMsgtxt("FORMATO ERRATO");
                e.setVisible(true);
            }
        } else {
            Err e = new Err();
            e.setMsgtxt("E' NECESSARIO COMPILARE TUTTI I CAMPI");
            e.setVisible(true);
        }
    }//GEN-LAST:event_salvaZActionPerformed

    private void aggZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggZActionPerformed
        // TODO add your handling code here:
        this.compAut(true);
    }//GEN-LAST:event_aggZActionPerformed

    private void sessoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sessoFocusGained
        // TODO add your handling code here:
        if (nomeLoc.isVisible()) {
            sesso.setNextFocusableComponent(nomeLoc);
        } else {
            sesso.setNextFocusableComponent(salvaAut);
        }
    }//GEN-LAST:event_sessoFocusGained

    private void jPanel8ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel8ComponentShown
        // TODO add your handling code here:
        //caricamento degli autisti
        this.caricoAutisti(autista);
    }//GEN-LAST:event_jPanel8ComponentShown

    private void salvaMaccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvaMaccActionPerformed
        // TODO add your handling code here:
        //recupero l'autista associato
        Autisti a = new Autisti();

        if (autista.getSelectedItem() != null) {
            for (Integer i = 0; i < this.getAutisti().size(); i++) {
                if ((this.getAutisti().get(i).getCognome() + " " + this.getAutisti().get(i).getNome()).equalsIgnoreCase(autista.getSelectedItem().toString())) {
                    a = this.getAutisti().get(i);
                }
            }
            //controllo che tutti i campi siano compilati
            if (nomeMacc != null && targaMacc != null && autista.getSelectedItem() != null) {

                //salvataggio della macchina
                Macchina m = new Macchina();
                m.setNome(nomeMacc.getText().toLowerCase());
                m.setTarga(targaMacc.getText().toLowerCase());
                m.setAutistaAss(a);

                //salvataggio nel db
                this.salvaMacc(m);
            }
        } else {
            Err e = new Err();
            e.setMsgtxt("E' NECESSARIO COMPILARE TUTTI I CAMPI");
            e.setVisible(true);
        }
    }//GEN-LAST:event_salvaMaccActionPerformed

    private void jPanel7ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel7ComponentShown
        // TODO add your handling code here:
        this.getGiorni(dataBord);
    }//GEN-LAST:event_jPanel7ComponentShown

    private void ottieniBordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ottieniBordActionPerformed
        // TODO add your handling code here:

        if (dataBord.getSelectedItem() != null) {
            String dataSplittata = dataBord.getSelectedItem().toString().replaceAll("-", "");
            String query = "SELECT * FROM spedizioni INNER JOIN pick" + dataSplittata + " ON spedizioni.id=pick" + dataSplittata + ".idsped";
            //connettersi e caricare un arraylist con le spedizioni e creare le tabelle dei bordeo
            try {
                conn = DriverManager.getConnection(url, user, pass);

                Statement state = conn.createStatement();
                ResultSet ris = state.executeQuery(query);
                conn.close();

                AutBord nf = new AutBord();
                ArrayList<Bordero> Ab = new ArrayList<Bordero>();
                while (ris.next()) {
                    Bordero b = new Bordero();
                    //ArrayList<Bordero> Ab = new ArrayList<Bordero>();
                    Spedizioni s = new Spedizioni();
                    Autisti a = new Autisti();
                    Cliente mitt = new Cliente();
                    Cliente dest = new Cliente();
                    Macchina m = new Macchina();
                    String[] info;
                    info = ris.getString("aut").split(";");

                    s.setId(ris.getString("id"));
                    s.setTos(ris.getString("tos"));
                    s.setNddt(ris.getString("nddt"));
                    s.setNc(ris.getInt("ncolli"));
                    s.setDataCons(ris.getString("data_cons"));
                    mitt.setRagSoc(ris.getString("ragsocmitt"));
                    mitt.setIndirizzo(ris.getString("ind_mitt"));
                    mitt.setCap(ris.getString("cap_mitt"));
                    dest.setRagSoc(ris.getString("ragsoc_dest"));
                    dest.setIndirizzo(ris.getString("ind_dest"));
                    dest.setCap(ris.getString("cap_dest"));
                    s.setMitt(mitt);
                    s.setDest(dest);
                    s.setTel(ris.getString("tel"));

                    a.setCognome(info[0]);
                    a.setNome(info[1]);
                    a.setDataNascita(info[2]);

                    m.setAutistaAss(a);
                    m.setNome(ris.getString("macc"));
                    m.setTarga(ris.getString("targa"));

                    b.setA(a);
                    b.setM(m);
                    b.setS(s);

                    Ab.add(b);

                }
                //stampa elenco autisti
                nf.setAb(Ab);
                nf.setVisible(true);
            } catch (SQLException sql) {
                if (sql.getSQLState().equalsIgnoreCase("42P01")) {
                    Err e = new Err();
                    e.setMsgtxt("E' NECESSARIO PRIMA CREARE LA PICKERLIST");
                    e.setVisible(true);
                } else {
                    Err e = new Err();
                    e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
                    e.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_ottieniBordActionPerformed

    private void jPanel6ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel6ComponentShown
        // TODO add your handling code here:

        //recupero delle date valide
        this.getGiorni(dataPick);
    }//GEN-LAST:event_jPanel6ComponentShown

    private void elabPickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elabPickActionPerformed
        // TODO add your handling code here:
        if (dataPick.getSelectedItem() != null) {
            //carico autisti con zone
            this.caricoAutistoANDzone();

            //carico macchine
            this.caricaMacchine();

            //prendo in carico le spedizioni
            this.caricaSped();
        } else {
            Err e = new Err();
            e.setMsgtxt("NESSUNA DATA SELEZIONATA");
            e.setVisible(true);
        }
    }//GEN-LAST:event_elabPickActionPerformed

    private void jPanel2ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel2ComponentShown

        ArrayList<Cliente> app = new ArrayList<>();
        app.clear();
        app = this.caricoClienti();

        //splittaggi clienti nella tandina
        mod_cli.removeAllItems();
        mod_cli.addItem("");
        for (Integer i = 0; i < app.size(); i++) {
            mod_cli.addItem(app.get(i).getRagSoc().toUpperCase());
        }
        mod_cli.addItem("Altro");

        mod_ragsoc_mitt.setEditable(false);
        mod_ind_mitt.setEditable(false);
        mod_cap_mitt.setEditable(false);
        this.setApp(app);
    }//GEN-LAST:event_jPanel2ComponentShown

    private void mod_storicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mod_storicoActionPerformed
        // TODO add your handling code here:
        Boolean b = false;
        Integer i = 0;
        String s = "";
        String id = null, ddt = null;
        DefaultTableModel model = (DefaultTableModel) tab.getModel();
        try {
            id = model.getValueAt(tab.getSelectedRow(), 0).toString();
            ddt = model.getValueAt(tab.getSelectedRow(), 3).toString();

            //update dello stato
            String query = "SELECT  data, stato FROM spedizione" + ddt + id;
            try {
                conn = DriverManager.getConnection(url, user, pass);
                Statement state = conn.createStatement();
                state.executeQuery(query);

                ResultSet ris = state.executeQuery(query);

                while (ris.next()) {
                    i++;
                    b = true;

                    s += "   * " + ris.getString("data") + "  - " + ris.getString("stato").toUpperCase() + "\n\n";
                }
                if (b) {
                    //System.out.println(s);
                    Storico st = new Storico();
                    st.setString(s);
                    st.setVisible(true);
                }
                conn.close();

                //creazione nuovo record nella tabella specifica
            } catch (SQLException sql) {
                Err e = new Err();
                e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
                e.setVisible(true);
            }
        } catch (NullPointerException | ArrayIndexOutOfBoundsException ai) {
            Err e = new Err();
            e.setMsgtxt("SELEZIONARE ALMENO UN RIFERIMENTO");
            e.setVisible(true);
        }

        //pulizia della tabella
        this.puliscTab();
    }//GEN-LAST:event_mod_storicoActionPerformed

    private void mod_riservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mod_riservaActionPerformed
        // TODO add your handling code here:
        String id = null, ddt = null;
        DefaultTableModel model = (DefaultTableModel) tab.getModel();
        try {
            id = model.getValueAt(tab.getSelectedRow(), 0).toString();
            ddt = model.getValueAt(tab.getSelectedRow(), 3).toString();

            //update dello stato
            String query = "UPDATE spedizioni SET stato=? WHERE id=? AND nddt=?";
            try {
                conn = DriverManager.getConnection(url, user, pass);
                PreparedStatement state = conn.prepareStatement(query);
                state.setString(1, "consegnata");
                state.setInt(2, Integer.parseInt(id));
                state.setString(3, ddt);
                state.executeUpdate();

                conn.close();

                //creazione nuovo record nella tabella specifica
                for (Integer i = 0; i < this.getSped().size(); i++) {
                    if (this.getSped().get(i).getId().equalsIgnoreCase(id) && this.getSped().get(i).getNddt().equalsIgnoreCase(ddt)) {
                        Riserva r = new Riserva(this.getSped().get(i).getMitt().getRagSoc(), this.getSped().get(i).getMitt().getIndirizzo(), this.getSped().get(i).getMitt().getCap(), this.getSped().get(i).getDest().getRagSoc(), this.getSped().get(i).getDest().getIndirizzo(), this.getSped().get(i).getDest().getCap(), this.getSped().get(i).getNddt(), this.getSped().get(i).getDataAcq(), "in giacenza");
                        r.setIdsped(Integer.parseInt(id));
                        r.start();
                        this.setR(r);
                    }
                }
            } catch (SQLException sql) {
                Err e = new Err();
                e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
                e.setVisible(true);
            }
        } catch (NullPointerException | ArrayIndexOutOfBoundsException ai) {
            Err e = new Err();
            e.setMsgtxt("SELEZIONARE ALMENO UN RIFERIMENTO");
            e.setVisible(true);
        }

        //pulizia della tabella
        this.puliscTab();
    }//GEN-LAST:event_mod_riservaActionPerformed

    private void mod_giacenzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mod_giacenzaActionPerformed
        // TODO add your handling code here:
        String id = null, ddt = null;
        DefaultTableModel model = (DefaultTableModel) tab.getModel();
        try {
            id = model.getValueAt(tab.getSelectedRow(), 0).toString();
            ddt = model.getValueAt(tab.getSelectedRow(), 3).toString();

            //update dello stato
            String query = "UPDATE spedizioni SET stato=? WHERE id=? AND nddt=?";
            try {
                conn = DriverManager.getConnection(url, user, pass);
                PreparedStatement state = conn.prepareStatement(query);
                state.setString(1, "in giacenza");
                state.setInt(2, Integer.parseInt(id));
                state.setString(3, ddt);
                state.executeUpdate();

                conn.close();

                //creazione nuovo record nella tabella specifica
                for (Integer i = 0; i < this.getSped().size(); i++) {
                    if (this.getSped().get(i).getId().equalsIgnoreCase(id) && this.getSped().get(i).getNddt().equalsIgnoreCase(ddt)) {
                        Update u = new Update(this.getSped().get(i).getMitt().getRagSoc(), this.getSped().get(i).getMitt().getIndirizzo(), this.getSped().get(i).getMitt().getCap(), this.getSped().get(i).getDest().getRagSoc(), this.getSped().get(i).getDest().getIndirizzo(), this.getSped().get(i).getDest().getCap(), this.getSped().get(i).getNddt(), this.getSped().get(i).getDataAcq(), "in giacenza");
                        u.setIdsped(Integer.parseInt(id));
                        u.start();
                        this.setU(u);
                    }
                }
            } catch (SQLException sql) {
                Err e = new Err();
                e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
                e.setVisible(true);
            }
        } catch (NullPointerException | ArrayIndexOutOfBoundsException ai) {
            Err e = new Err();
            e.setMsgtxt("SELEZIONARE ALMENO UN RIFERIMENTO");
            e.setVisible(true);
        }

        //pulizia della tabella
        this.puliscTab();
    }//GEN-LAST:event_mod_giacenzaActionPerformed

    private void mod_eliminaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mod_eliminaActionPerformed
        // TODO add your handling code here:
        String id = null, ddt = null;
        DefaultTableModel model = (DefaultTableModel) tab.getModel();
        try {
            id = model.getValueAt(tab.getSelectedRow(), 0).toString();
            ddt = model.getValueAt(tab.getSelectedRow(), 3).toString();

            String queryGen = "DELETE FROM spedizioni WHERE id=? AND nddt=?";
            String querySpec = "DROP TABLE spedizione" + ddt + id;
            try {
                conn = DriverManager.getConnection(url, user, pass);

                //eliminazione dal registro generale
                PreparedStatement state = conn.prepareStatement(queryGen);
                state.setInt(1, Integer.parseInt(id));
                state.setString(2, ddt);
                state.executeLargeUpdate();

                //eliminazione della tabella
                Statement state2 = conn.createStatement();
                state2.executeUpdate(querySpec);

                conn.close();
            } catch (SQLException sql) {
                Err e = new Err();
                e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
                e.setVisible(true);
            }
        } catch (NullPointerException | ArrayIndexOutOfBoundsException ai) {
            Err e = new Err();
            e.setMsgtxt("SELEZIONARE ALMENO UN RIFERIMENTO");
            e.setVisible(true);
        }

        //pulizia della tabella
        this.puliscTab();
    }//GEN-LAST:event_mod_eliminaActionPerformed

    private void mod_ispezionaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mod_ispezionaActionPerformed
        // TODO add your handling code here:
        ArrayList<Spedizioni> app = new ArrayList<>();
        app = this.getSped();

        String id = "", ddt = "";
        DefaultTableModel model = (DefaultTableModel) tab.getModel();
        try {
            id = model.getValueAt(tab.getSelectedRow(), 0).toString();
            ddt = model.getValueAt(tab.getSelectedRow(), 3).toString();

            /*if (this.getSped().size() == 1) {
                Modifica m = new Modifica();
                m.setSped(this.getSped().get(0));
                //lancio il th per oscuramento degli oggetti
                ThOp th = new ThOp();
                this.setTh(th);
                th.setM(m);
                th.setPulisci(false);
                th.setDel(false);
                th.start();

                //mostro la finestra
                m.setVisible(true);
            } else {*/
            for (Integer i = 0; i < app.size(); i++) {
                if (app.get(i).getId().equalsIgnoreCase(id) && app.get(i).getNddt().equalsIgnoreCase(ddt)) {
                    Modifica m = new Modifica();
                    m.setSped(app.get(i));
                    m.setM(m);
                    //lancio il th per oscuramento degli oggetti
                    ThOp th = new ThOp();
                    this.setTh(th);
                    th.setM(m);
                    th.setPulisci(false);
                    th.setDel(false);
                    th.start();

                    //mostro la finestra
                    m.setVisible(true);
                }
            }
            //}
        } catch (NullPointerException | ArrayIndexOutOfBoundsException ai) {
            Err e = new Err();
            e.setMsgtxt("SELEZIONARE ALMENO UN RIFERIMENTO");
            e.setVisible(true);
        }
        //pulizia della tabella
        this.puliscTab();
    }//GEN-LAST:event_mod_ispezionaActionPerformed

    private void mod_cercaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mod_cercaActionPerformed
        // TODO add your handling code here:

        //se viene compilato il campo ddt
        if (!mod_nddt.getText().isBlank()) {
            radioDdt.setSelected(true);
        }

        //se viene compilato le intestazioni
        if (!mod_ragsoc_mitt.getText().isBlank()
                && !mod_ind_mitt.getText().isBlank()
                && !mod_cap_mitt.getText().isBlank()
                && !mod_ragsoc_dest.getText().isBlank()
                && !mod_ind_dest.getText().isBlank()
                && !mod_cap_dest.getText().isBlank()) {
            radioIntestazioni.setSelected(true);
        }

        //se viene compilato il campo della data di acquisizione
        if (!mod_acq.getText().isBlank()) {
            radioAcq.setSelected(true);
        }

        //se viene compilato il campo della data di consegna
        if (!mod_cons.getText().isBlank()) {
            radioCons.setSelected(true);
        }

        if (!radioDdt.isSelected()
                && !radioIntestazioni.isSelected()
                && !radioAcq.isSelected()
                && !radioCons.isSelected()) {
            Err e = new Err();
            e.setMsgtxt("E' NECESSARIO SELEZIONARE UN PARAMETRO DI RICERCA");
            e.setVisible(true);
        } else {

            if (radioDdt.isSelected()) {
                this.ricercaDdt(mod_nddt.getText().toLowerCase());
            }

            if (radioIntestazioni.isSelected()) {
                Cliente mitt = new Cliente();
                Cliente dest = new Cliente();

                mitt.setRagSoc(mod_ragsoc_mitt.getText());
                mitt.setIndirizzo(mod_ind_mitt.getText());
                mitt.setCap(mod_cap_mitt.getText());

                dest.setRagSoc(mod_ragsoc_dest.getText());
                dest.setIndirizzo(mod_ind_dest.getText());
                dest.setCap(mod_cap_dest.getText());

                this.ricercaIntestaz(mitt, dest);
            }

            if (radioAcq.isSelected()) {
                String data = "";
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                try {
                    data = this.checkData(mod_acq.getText());
                } catch (NumberFormatException dt) {
                    Err e = new Err();
                    e.setMsgtxt("ERRORE FORMATO DATA [" + dt.getMessage() + "]");
                    e.setVisible(true);
                }
                this.ricercaAcq(data);
            }

            if (radioCons.isSelected()) {
                String data = "";
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                try {
                    data = this.checkData(mod_cons.getText());
                } catch (NumberFormatException dt) {
                    Err e = new Err();
                    e.setMsgtxt("ERRORE FORMATO DATA [" + dt.getMessage() + "]");
                    e.setVisible(true);
                }
                this.ricercaCons(data);
            }

        }

        this.clearRic();
    }//GEN-LAST:event_mod_cercaActionPerformed

    private void mod_cliItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mod_cliItemStateChanged
        // TODO add your handling code here:
        ArrayList<Cliente> app = new ArrayList<>();
        app = this.getApp();
        if (mod_cli.getSelectedItem() != null) {

            if (mod_cli.getSelectedItem().toString().equalsIgnoreCase("Altro")) {
                mod_ragsoc_mitt.setText("");
                mod_ind_mitt.setText("");
                mod_cap_mitt.setText("");
                mod_id_mitt.setText("");

                mod_ragsoc_mitt.setEditable(true);
                mod_ind_mitt.setEditable(true);
                mod_cap_mitt.setEditable(true);
                mod_id_mitt.setText("0000");
            } else {
                mod_ragsoc_mitt.setEditable(false);
                mod_ind_mitt.setEditable(false);
                mod_cap_mitt.setEditable(false);

                for (Integer i = 0; i < app.size(); i++) {
                    if (mod_cli.getSelectedItem().toString().equalsIgnoreCase(app.get(i).getRagSoc())) {
                        mod_ragsoc_mitt.setText(app.get(i).getRagSoc());
                        mod_ind_mitt.setText(app.get(i).getIndirizzo());
                        mod_cap_mitt.setText(app.get(i).getCap());
                        mod_id_mitt.setText(app.get(i).getId().toString());
                        return;
                    } else {
                        mod_ragsoc_mitt.setText("");
                        mod_ind_mitt.setText("");
                        mod_cap_mitt.setText("");
                        mod_id_mitt.setText("");
                    }
                }
            }
        }
    }//GEN-LAST:event_mod_cliItemStateChanged

    private void radioConsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioConsActionPerformed
        // TODO add your handling code here:
        //se Ã¨ selezionata l'opzione della data di consegna
        if (radioCons.isSelected()) {
            radioIntestazioni.setSelected(false);
            radioAcq.setSelected(false);
            radioDdt.setSelected(false);
        }
    }//GEN-LAST:event_radioConsActionPerformed

    private void radioAcqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioAcqActionPerformed
        // TODO add your handling code here:
        //se Ã¨ selezionata l'opzione della data di acquisizione
        if (radioAcq.isSelected()) {
            radioIntestazioni.setSelected(false);
            radioDdt.setSelected(false);
            radioCons.setSelected(false);
        }
    }//GEN-LAST:event_radioAcqActionPerformed

    private void radioIntestazioniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioIntestazioniActionPerformed
        // TODO add your handling code here:
        //se Ã¨ selezionata l'opzione delle intestazioni
        if (radioIntestazioni.isSelected()) {
            radioDdt.setSelected(false);
            radioAcq.setSelected(false);
            radioCons.setSelected(false);
        }
    }//GEN-LAST:event_radioIntestazioniActionPerformed

    private void radioDdtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioDdtActionPerformed
        // TODO add your handling code here:
        // se Ã¨ selezionata l'opzione del numero ddt per la ricerca della sedizione e la successiva modifica
        if (radioDdt.isSelected()) {
            radioIntestazioni.setSelected(false);
            radioAcq.setSelected(false);
            radioCons.setSelected(false);
        }
    }//GEN-LAST:event_radioDdtActionPerformed

    private void jPanel1ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel1ComponentShown
        Integer dim;
        //pulizia dei campi
        this.clearField();
        // aggiunta data di oggi
        data.setText(this.today());
        //carico clienti
        ArrayList<Cliente> app = new ArrayList<>();
        app.clear();
        app = this.caricoClienti();

        dim = app.size();
        //splittaggio clienti
        nomCli.removeAllItems();
        nomCli.addItem("");
        for (Integer i = 0; i < dim; i++) {
            nomCli.addItem(app.get(i).getRagSoc().toUpperCase());
        }
        nomCli.addItem("Altro");

        dataCons.setText(this.tomorrow());
    }//GEN-LAST:event_jPanel1ComponentShown

    private void pulisciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pulisciActionPerformed
        // TODO add your handling code here:
        this.clearField();
    }//GEN-LAST:event_pulisciActionPerformed

    private void salvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvaActionPerformed
        // controllo che tutti i campi siano ok
        try {
            if (nomCli.getSelectedItem() != null
                    && idCli.getText() != null
                    && stato.getText() != null
                    && tos.getSelectedItem() != null
                    && data.getText() != null
                    && ragsocMitt != null
                    && indMitt.getText() != null
                    && capMitt.getText() != null
                    && ragsocDest != null
                    && indDest.getText() != null
                    && capDest.getText() != null
                    && ddtxt.getText() != null
                    && dataCons.getText() != null
                    && (ncollitxt.getText() != null && Integer.parseInt(ncollitxt.getText()) >= 0)) {

                //controllo della data
                try {
                    //data acquisizione
                    try {
                        try {
                            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                            LocalDate lc = LocalDate.parse(this.checkData(data.getText()), formatter);
                            data.setText(this.checkData(data.getText()));
                        } catch (ArrayIndexOutOfBoundsException ai) {
                            Err e = new Err();
                            e.setMsgtxt("FORMATO ERRATO");
                            e.setVisible(true);
                        }
                    } catch (DateTimeParseException dt) {
                        Err e = new Err();
                        e.setMsgtxt("FORMATO DATA DI ACQUISIZIONE ERRATO[" + dt.getErrorIndex() + ", " + dt.getParsedString() + "]");
                        e.setVisible(true);
                    }

                    //data consegna
                    try {
                        try {
                            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                            LocalDate lc = LocalDate.parse(this.checkData(dataCons.getText()), formatter);
                            dataCons.setText(this.checkData(dataCons.getText()));
                        } catch (ArrayIndexOutOfBoundsException ai) {
                            Err e = new Err();
                            e.setMsgtxt("FORMATO ERRATO");
                            e.setVisible(true);
                        }
                    } catch (DateTimeParseException dt) {
                        Err e = new Err();
                        e.setMsgtxt("FORMATO DATA DI CONSEGNA ERRATO [" + dt.getErrorIndex() + ", " + dt.getParsedString() + "]");
                        e.setVisible(true);
                    }
                } catch (NumberFormatException nf) {
                    Err e = new Err();
                    e.setMsgtxt("ECCEZIONE DI FORMATO");
                    e.setVisible(true);
                }

                stato.setText("ACQUISITA");
                if (nomCli.getSelectedItem().toString().equalsIgnoreCase("altro")) {
                    Spedizioni s = new Spedizioni();
                    Cliente c = new Cliente();
                    c.setRagSoc(ragsocMitt.getText());
                    c.setIndirizzo(indMitt.getText());
                    c.setCap(capMitt.getText());
                    c.setId(Integer.parseInt(idCli.getText()));
                    ErrContatto e = new ErrContatto();
                    e.setCliente(c);
                    e.setMsgtxt("Vuoi salvare il mittente?");
                    e.setVisible(true);
                }

                //salvataggio spedizione
                String tel = "", vol = "";
                Integer idcli, idsped;
                if (teltxt.getText().isBlank()) {
                    tel = "";
                } else {
                    try {
                        tel = teltxt.getText();
                    } catch (NumberFormatException nf) {
                        Err e = new Err();
                        e.setMsgtxt("FORMATO NUMERO DI TELEFONO NON VALIDO");
                        e.setVisible(true);
                    }

                }

                if (voltxt.getText().isBlank()) {
                    vol = "";
                } else {
                    vol = voltxt.getText();
                }

                if (nomCli.getSelectedItem().toString().equalsIgnoreCase("altro")) {
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
                    LocalDate lc = LocalDate.now();
                    idcli = Integer.parseInt(lc.toString().replaceAll("-", ""));

                } else {
                    idcli = Integer.parseInt(idCli.getText());
                }
                //salvataggio spedizione nel registro generale
                this.salvaSped(idcli.toString(), stato.getText(), tos.getSelectedItem().toString(), data.getText(), ragsocMitt.getText(), indMitt.getText(), capMitt.getText(), ragsocDest.getText(), indDest.getText(), capDest.getText(), ddtxt.getText(), dataCons.getText(), ncollitxt.getText(), tel, vol);

                Multithreading t = new Multithreading(ragsocMitt.getText().toLowerCase(), indMitt.getText().toLowerCase(), capMitt.getText(), ragsocDest.getText().toLowerCase(), indDest.getText().toLowerCase(), capDest.getText(), ddtxt.getText(), data.getText(), "ACQUISITA");
                t.start();
                this.setT(t);
            } else {
                Err e = new Err();
                e.setMsgtxt("E' NECESSRIO COMPLETARE TUTTI I CAMPI");
                e.setVisible(true);
            }
        } catch (NumberFormatException nf) {
            Err e = new Err();
            e.setMsgtxt("ERRORE GENERICO DI FORMATO ");
            e.setVisible(true);
        }
    }//GEN-LAST:event_salvaActionPerformed

    private void nomCliItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_nomCliItemStateChanged
        // TODO add your handling code here:
        if (nomCli.getSelectedItem() != null) {

            if (nomCli.getSelectedItem().toString().equalsIgnoreCase("altro")) {

                ragsocMitt.setText("");
                indMitt.setText("");
                capMitt.setText("");
                idCli.setText("");

                ragsocMitt.setEditable(true);
                indMitt.setEditable(true);
                capMitt.setEditable(true);
                idCli.setText("0000");
            } else {
                ragsocMitt.setEditable(false);
                indMitt.setEditable(false);
                capMitt.setEditable(false);

                for (Integer i = 0; i < clienti.size(); i++) {
                    if (nomCli.getSelectedItem().toString().equalsIgnoreCase(clienti.get(i).getRagSoc())) {
                        ragsocMitt.setText(clienti.get(i).getRagSoc());
                        indMitt.setText(clienti.get(i).getIndirizzo());
                        capMitt.setText(clienti.get(i).getCap());
                        idCli.setText(clienti.get(i).getId().toString());
                        return;
                    } else {
                        ragsocMitt.setText("");
                        indMitt.setText("");
                        capMitt.setText("");
                        idCli.setText("");
                    }
                }
            }
        }
    }//GEN-LAST:event_nomCliItemStateChanged

    private void jPanel3ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel3ComponentShown
        // TODO add your handling code here:
        ArrayList<Cliente> c = new ArrayList<>();
        Integer dim;

        modCli.removeAllItems();
        c = this.caricoClienti();
        dim = c.size();

        modCli.addItem("");
        for (Integer i = 0; i < dim; i++) {
            modCli.addItem(c.get(i).getRagSoc().toUpperCase());
        }
    }//GEN-LAST:event_jPanel3ComponentShown

    public void setC(Cliente c) {
        this.c = c;
    }

    public Cliente getC() {
        return c;
    }

    private void modCliItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_modCliItemStateChanged
        // TODO add your handling code here:
        Boolean b = false;
        ArrayList<Cliente> c = new ArrayList<>();
        c = this.caricoClienti();
        if (modCli.getSelectedItem() != null) {

            for (Integer i = 0; i < c.size(); i++) {
                if (modCli.getSelectedItem().toString().equalsIgnoreCase(c.get(i).getRagSoc())) {
                    mod_ragsocMitt.setText(c.get(i).getRagSoc().toUpperCase());
                    mod_indMitt.setText(c.get(i).getIndirizzo().toUpperCase());
                    mod_capMitt.setText(c.get(i).getCap());
                    this.setC(c.get(i));
                    return;
                } else {
                    mod_ragsocMitt.setText("");
                    mod_indMitt.setText("");
                    mod_capMitt.setText("");
                }
            }
        }
    }//GEN-LAST:event_modCliItemStateChanged

    private void eliminaCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminaCliActionPerformed
        // TODO add your handling code here:
        String query = "DELETE FROM clienti WHERE id=?";
        try {
            conn = DriverManager.getConnection(url, user, pass);

            PreparedStatement state = conn.prepareStatement(query);
            state.setInt(1, this.getC().getId());
            state.executeUpdate();
            conn.close();

            //ricarico i clienti
            ArrayList<Cliente> a = new ArrayList<>();
            a = this.caricoClienti();

            modCli.removeAllItems();
            modCli.addItem("");
            for (Integer i = 0; i < a.size(); i++) {
                modCli.addItem(a.get(i).getRagSoc().toUpperCase());
            }

        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }
    }//GEN-LAST:event_eliminaCliActionPerformed

    private void aggiornaCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggiornaCliActionPerformed
        // TODO add your handling code here:
        if (modCli.getSelectedItem() != null) {
            String query = "UPDATE clienti SET nome=?,indirizzo=?,cap=? WHERE id=?";
            try {
                conn = DriverManager.getConnection(url, user, pass);

                PreparedStatement state = conn.prepareStatement(query);

                state.setString(1, mod_ragsocMitt.getText().toLowerCase());
                state.setString(2, mod_indMitt.getText().toLowerCase());
                state.setString(3, mod_capMitt.getText().toLowerCase());
                state.setInt(4, this.getC().getId());
                state.executeUpdate();
                conn.close();

                //ricarico i clienti
                ArrayList<Cliente> a = new ArrayList<>();
                a = this.caricoClienti();

                modCli.removeAllItems();
                modCli.addItem("");
                for (Integer i = 0; i < a.size(); i++) {
                    modCli.addItem(a.get(i).getRagSoc().toUpperCase());
                }
            } catch (SQLException sql) {
                Err e = new Err();
                e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
                e.setVisible(true);
            }
        }
    }//GEN-LAST:event_aggiornaCliActionPerformed

    private void jPanel4ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel4ComponentShown
        // TODO add your handling code here:
        ArrayList<Macchina> mac = new ArrayList<>();

        Integer dim;
        mod_autista.removeAllItems();
        this.caricaMacchine();
        mac = this.getMac();
        dim = mac.size();
        this.setAPass(this.getAut());
        macchina.removeAllItems();
        macchina.addItem("");
        for (Integer i = 0; i < dim; i++) {
            macchina.addItem(mac.get(i).getNome().toUpperCase());
        }


    }//GEN-LAST:event_jPanel4ComponentShown

    public ArrayList<Autisti> getAut() {
        ArrayList<Autisti> a = new ArrayList<>();
        String query = "SELECT * FROM autisti";

        try {
            conn = DriverManager.getConnection(url, user, pass);

            Statement state = conn.createStatement();
            ResultSet ris = state.executeQuery(query);

            while (ris.next()) {
                Autisti aut = new Autisti();
                aut.setNome(ris.getString("nome"));
                aut.setCognome(ris.getString("cognome"));
                a.add(aut);
            }
        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }
        return a;
    }

    public void macToDel(Macchina m) {
        this.m = m;
    }

    public Macchina getMacToDel() {
        return m;
    }

    public void setTargaToDel(String targa) {
        this.targa = targa;
    }

    public String getTargaToDel() {
        return targa;
    }

    public void setAutToDel(Autisti a) {
        this.auttodel = a;
    }

    public Autisti getAutToDel() {
        return auttodel;
    }

    public void setAPass(ArrayList<Autisti> a) {
        this.passA = a;
    }

    public ArrayList<Autisti> getAPass() {
        return passA;
    }

    private void macchinaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_macchinaItemStateChanged
        // TODO add your handling code here:
        mod_autista.removeAllItems();
        ArrayList<Macchina> mac = new ArrayList<>();
        ArrayList<Autisti> a = new ArrayList<>();

        Integer dim, dim2;
        this.caricaMacchine();
        //carico autisti

        a = this.getAPass();
        mac = this.getMac();
        dim = mac.size();

        dim2 = a.size();
        mod_autista.removeAll();
        mod_autista.addItem("");
        for (Integer i = 0; i < dim2; i++) {
            mod_autista.addItem(a.get(i).getCognome().toUpperCase() + " " + a.get(i).getNome().toUpperCase());
        }

        if (macchina.getSelectedItem() != null) {
            for (Integer i = 0; i < dim; i++) {
                if (macchina.getSelectedItem().toString().equalsIgnoreCase(mac.get(i).getNome())) {
                    String nome = mac.get(i).getNome().toUpperCase(), targa = mac.get(i).getTarga().toUpperCase();
                    mod_nomeMacc.setText(nome);
                    mod_targaMacc.setText(targa);
                    this.setTargaToDel(targa.toLowerCase());

                    for (Integer j = 0; j < dim2; j++) {
                        if (mac.get(i).getAutistaAss().getCognome().equalsIgnoreCase(a.get(j).getCognome()) && mac.get(i).getAutistaAss().getNome().equalsIgnoreCase(a.get(j).getNome())) {
                            mod_autista.setSelectedItem(mac.get(i).getAutistaAss().getCognome().toUpperCase() + " " + mac.get(i).getAutistaAss().getNome().toUpperCase());
                        }
                    }

                    this.macToDel(mac.get(i));
                    return;
                } else {
                    mod_nomeMacc.setText("");
                    mod_targaMacc.setText("");
                    mod_autista.setSelectedItem("");
                }
            }

        }
    }//GEN-LAST:event_macchinaItemStateChanged

    private void modMacDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modMacDelActionPerformed
        // TODO add your handling code here:
        MaccOp macc = new MaccOp();
        macc.setTarga(this.getTargaToDel());
        macc.setTipo("elimina");
        this.setMacc(macc);
        macc.start();

        //ricaricamento
        ArrayList<Macchina> mac = new ArrayList<>();
        ArrayList<Autisti> a = new ArrayList<>();
        Integer dim, dim2;

        macchina.removeAllItems();
        this.caricaMacchine();
        mac = this.getMac();
        dim = mac.size();

        //carico autisti
        macchina.addItem("");
        for (Integer i = 0; i < dim; i++) {
            macchina.addItem(mac.get(i).getNome().toUpperCase());
        }

        a = this.getAut();
        mac = this.getMac();
        dim2 = a.size();

        mod_autista.removeAll();

        macchina.setSelectedItem("");
        mod_autista.setSelectedItem("");
        mod_nomeMacc.setText("");
        mod_targaMacc.setText("");

    }//GEN-LAST:event_modMacDelActionPerformed

    private void aggMaccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggMaccActionPerformed
        // TODO add your handling code here:
        MaccOp macc = new MaccOp();
        macc.setNome(mod_nomeMacc.getText());
        macc.setTarga(mod_targaMacc.getText());
        macc.setA(this.getAutToDel().getCognome().toLowerCase() + ";" + this.getAutToDel().getNome().toLowerCase() + ";" + this.getAutToDel().getDataNascita());
        macc.setTargaV(this.getTargaToDel());
        macc.setTipo("up");
        this.setMacc(macc);
        macc.start();

        //ricaricamento
        ArrayList<Macchina> mac = new ArrayList<>();
        ArrayList<Autisti> a = new ArrayList<>();
        Integer dim, dim2;

        macchina.removeAllItems();
        this.caricaMacchine();
        mac = this.getMac();
        dim = mac.size();

        //carico autisti
        macchina.addItem("");
        for (Integer i = 0; i < dim; i++) {
            macchina.addItem(mac.get(i).getNome().toUpperCase());
        }

        a = this.getAut();
        mac = this.getMac();
        dim2 = a.size();

        mod_autista.removeAll();

        macchina.setSelectedItem("");
        mod_autista.setSelectedItem("");
        mod_nomeMacc.setText("");
        mod_targaMacc.setText("");

    }//GEN-LAST:event_aggMaccActionPerformed

    private void mod_autistaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mod_autistaItemStateChanged
        // TODO add your handling code here:
        ArrayList<Autisti> a = new ArrayList<>();
        ArrayList<Macchina> mac = new ArrayList<>();

        a = this.getAut();
        mac = this.getMac();
        Integer dim = mac.size();
        Integer dim2 = a.size();

        if (mod_autista.getSelectedItem() != null) {
            for (Integer i = 0; i < dim2; i++) {
                if ((a.get(i).getCognome() + " " + a.get(i).getNome()).equalsIgnoreCase(mod_autista.getSelectedItem().toString())) {
                    this.setAutToDel(a.get(i));
                    return;
                }
            }
        }


    }//GEN-LAST:event_mod_autistaItemStateChanged

    private void mod_sessoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mod_sessoFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_mod_sessoFocusGained

    private void aggLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggLocActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tabModAut.getModel();
        model.setNumRows(model.getRowCount() + 1);
    }//GEN-LAST:event_aggLocActionPerformed

    private void cancLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancLocActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tabModAut.getModel();
        try {
            model.removeRow(tabModAut.getSelectedRow());
        } catch (ArrayIndexOutOfBoundsException ai) {
            Err e = new Err();
            e.setMsgtxt("SELEZIONA UNA RIGA");
            e.setVisible(true);
        }
    }//GEN-LAST:event_cancLocActionPerformed

    private void jPanel5ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel5ComponentShown
        // TODO add your handling code here:
        autDisp.removeAllItems();
        ArrayList<Autisti> a = new ArrayList<>();

        //1. carico autisti e one in a
        this.caricoAutistoANDzone();
        a = this.getA();

        //1.1 carico gli oggetti nel combobox
        autDisp.addItem("");
        for (Integer i = 0; i < a.size(); i++) {
            autDisp.addItem(a.get(i).getCognome().toUpperCase() + " " + a.get(i).getNome().toUpperCase());
        }
    }//GEN-LAST:event_jPanel5ComponentShown

    public void passaAut(Autisti a) {
        this.autPassato = a;
    }

    public Autisti getPassaAut() {
        return autPassato;
    }

    private void autDispItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_autDispItemStateChanged
        // TODO add your handling code here:
        if (autDisp.getItemCount() > 0) {
            ArrayList<Autisti> a = new ArrayList<>();
            a = this.getA();
            Boolean b = false;
            DefaultTableModel model = (DefaultTableModel) tabModAut.getModel();
            Integer dim = a.size();

            //1.2 compilazione automatica campi txt
            if (autDisp.getSelectedItem() != null) {
                for (Integer i = 0; i < dim; i++) {
                    if (autDisp.getSelectedItem().toString().equalsIgnoreCase(a.get(i).getCognome() + " " + a.get(i).getNome())) {
                        mod_nometxt.setText(a.get(i).getNome().toUpperCase());
                        mod_cognometxt.setText(a.get(i).getCognome().toUpperCase());
                        mod_dtntxt.setText(a.get(i).getDataNascita());
                        mod_sesso.setSelectedItem(a.get(i).getSesso().toUpperCase());

                        //1.3 chiamata thread per compilazione automatica tabella 
                        TabZoneAut tza = new TabZoneAut();
                        tza.setModel(model);
                        tza.setA(a.get(i));
                        b = true;
                        tza.start();

                        this.passaAut(a.get(i));

                        return;
                    } else {
                        model.setRowCount(0);
                        mod_nometxt.setText("");
                        mod_cognometxt.setText("");
                        mod_dtntxt.setText("");
                        mod_sesso.setSelectedItem("M");
                    }
                }
            }
        }
    }//GEN-LAST:event_autDispItemStateChanged


    private void salvaModAutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvaModAutActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tabModAut.getModel();
        //1. controllo della data di nascita
        try {
            try {
                try {
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                    LocalDate lc = LocalDate.parse(this.checkData(mod_dtntxt.getText()), formatter);
                    mod_dtntxt.setText(this.checkData(mod_dtntxt.getText()));
                } catch (ArrayIndexOutOfBoundsException ai) {
                    Err e = new Err();
                    e.setMsgtxt("FORMATO ERRATO");
                    e.setVisible(true);
                }
            } catch (DateTimeParseException dt) {
                Err e = new Err();
                e.setMsgtxt("FORMATO DATA ERRATO");
                e.setVisible(true);
            }

            //2. controllo che nome e cognome siano completi
            if (!mod_nometxt.getText().isBlank() || !mod_cognometxt.getText().isBlank()) {

                //3. creazione dell oggetto
                Autisti a = new Autisti();
                Autisti v = new Autisti();
                v = this.getPassaAut();
                ArrayList<Zona> z = new ArrayList<>();

                a.setNome(mod_nometxt.getText().toLowerCase());
                a.setCognome(mod_cognometxt.getText().toLowerCase());
                a.setDataNascita(mod_dtntxt.getText());
                a.setSesso(mod_sesso.getSelectedItem().toString().toLowerCase());

                for (Integer i = 0; i < model.getRowCount(); i++) {
                    Zona zo = new Zona();
                    zo.setLoc(tabModAut.getValueAt(i, 0).toString().toLowerCase());
                    zo.setCap(tabModAut.getValueAt(i, 1).toString().toLowerCase());

                    z.add(zo);
                }
                a.setCompetenza(z);

                //4. memorizzazione su tabella generale
                String query = "UPDATE autisti SET nome=?,cognome=?,dn=?,sesso=? WHERE nome=? AND cognome=? AND dn=?";

                try {
                    conn = DriverManager.getConnection(url, user, pass);

                    PreparedStatement state = conn.prepareStatement(query);
                    state.setString(1, a.getNome().toLowerCase());
                    state.setString(2, a.getCognome().toLowerCase());
                    state.setString(3, a.getDataNascita());
                    state.setString(4, a.getSesso().toLowerCase());
                    state.setString(5, v.getNome().toLowerCase());
                    state.setString(6, v.getCognome().toLowerCase());
                    state.setString(7, v.getDataNascita());
                    state.executeUpdate();
                    conn.close();
                } catch (SQLException sql) {
                    Err e = new Err();
                    e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
                    e.setVisible(true);
                }

                //5. memorizzazione su tabella specifica
                AggAut aa = new AggAut();
                aa.setA(a);
                aa.setV(v);
                aa.start();

                //6. aggiunta del thread al controllo 
                this.setAggAut(aa);

                //7. pulizia dei campi 
                this.pulisciModAut();

            }
        } catch (NumberFormatException nf) {
            Err e = new Err();
            e.setMsgtxt("FORMATO ERRATO O CAMPO NON COMPILATO");
            e.setVisible(true);
        } catch (InterruptedException ex) {
            Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_salvaModAutActionPerformed

    public void pulisciModAut() throws InterruptedException {
        DefaultTableModel model = (DefaultTableModel) tabModAut.getModel();
        ArrayList<Autisti> a = new ArrayList<>();
        //autDisp.removeAllItems();

        //pulizia dei campi
        if (this.getAggAut() != null) {
            if (this.getAggAut().isAlive()) {
                this.getAggAut().join();
            }
        }
        autDisp.removeAllItems();
        mod_nometxt.setText("");
        mod_cognometxt.setText("");
        mod_dtntxt.setText("");
        mod_sesso.setSelectedItem("M");
        model.setRowCount(0);

        //1. carico autisti e one in a
        this.caricoAutistoANDzone();
        a = this.getA();

        //1.1 carico gli oggetti nel combobox
        autDisp.addItem("");
        for (Integer i = 0; i < a.size(); i++) {
            autDisp.addItem(a.get(i).getCognome().toUpperCase() + " " + a.get(i).getNome().toUpperCase());
        }
    }

    public void setAggAut(AggAut a) {
        this.agga = a;
    }

    public AggAut getAggAut() {
        return agga;
    }

    private void salvaModAutMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salvaModAutMouseEntered
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tabModAut.getModel();
        if (tabModAut.isEditing()) {
            salvaModAut.setEnabled(false);
        } else {
            salvaModAut.setEnabled(true);
        }
    }//GEN-LAST:event_salvaModAutMouseEntered

    private void ricPickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ricPickActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) ricPickTab.getModel();
        model.setRowCount(0);
        //1. controllo che la data sia corretta
        try {
            try {
                try {
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                    LocalDate lc = LocalDate.parse(this.checkData(ric_dt.getText()), formatter);
                    ric_dt.setText(this.checkData(ric_dt.getText()));
                } catch (ArrayIndexOutOfBoundsException ai) {
                    Err e = new Err();
                    e.setMsgtxt("FORMATO ERRATO");
                    e.setVisible(true);
                }
            } catch (DateTimeParseException dt) {
                Err e = new Err();
                e.setMsgtxt("FORMATO DATA ERRATO");
                e.setVisible(true);
            }

            //2. cerco la tabella
            String data = ric_dt.getText().replaceAll("-", "");
            String query = "SELECT * FROM spedizioni INNER JOIN pick" + data + " ON spedizioni.id=pick" + data + ".idsped";

            try {
                conn = DriverManager.getConnection(url, user, pass);

                Statement state = conn.createStatement();
                ResultSet ris = state.executeQuery(query);
                conn.close();

                AutBord nf = new AutBord();
                ArrayList<Bordero> Ab = new ArrayList<Bordero>();
                while (ris.next()) {
                    Bordero b = new Bordero();
                    //ArrayList<Bordero> Ab = new ArrayList<Bordero>();
                    Spedizioni s = new Spedizioni();
                    Autisti a = new Autisti();
                    Cliente mitt = new Cliente();
                    Cliente dest = new Cliente();
                    Macchina m = new Macchina();
                    String[] info;
                    info = ris.getString("aut").split(";");

                    s.setId(ris.getString("id"));
                    s.setTos(ris.getString("tos"));
                    s.setNddt(ris.getString("nddt"));
                    s.setNc(ris.getInt("ncolli"));
                    s.setDataCons(ris.getString("data_cons"));
                    mitt.setRagSoc(ris.getString("ragsocmitt"));
                    mitt.setIndirizzo(ris.getString("ind_mitt"));
                    mitt.setCap(ris.getString("cap_mitt"));
                    dest.setRagSoc(ris.getString("ragsoc_dest"));
                    dest.setIndirizzo(ris.getString("ind_dest"));
                    dest.setCap(ris.getString("cap_dest"));
                    s.setMitt(mitt);
                    s.setDest(dest);
                    s.setTel(ris.getString("tel"));

                    a.setCognome(info[0]);
                    a.setNome(info[1]);
                    a.setDataNascita(info[2]);

                    m.setAutistaAss(a);
                    m.setNome(ris.getString("macc"));
                    m.setTarga(ris.getString("targa"));

                    b.setA(a);
                    b.setM(m);
                    b.setS(s);

                    Ab.add(b);
                }

                for (Integer i = 0; i < Ab.size(); i++) {
                    if (Ab.get(i).getS().getTos().equalsIgnoreCase("spedizione")) {
                        model.addRow(new Object[]{Ab.get(i).getS().getId(), Ab.get(i).getS().getNddt(), Ab.get(i).getS().getMitt().getRagSoc().toUpperCase(), Ab.get(i).getS().getMitt().getCap(), Ab.get(i).getS().getDest().getRagSoc().toUpperCase(), Ab.get(i).getS().getDest().getCap(), Ab.get(i).getS().getNc(), Ab.get(i).getM().getTarga().toUpperCase(), Ab.get(i).getM().getNome().toUpperCase(), Ab.get(i).getA().getCognome().toUpperCase() + " " + Ab.get(i).getA().getNome().toUpperCase()});
                    }
                }
            } catch (SQLException sql) {
                if (sql.getSQLState().equalsIgnoreCase("42P01")) {
                    Err e = new Err();
                    e.setMsgtxt("NON E' STATA EMESSA ALCUNA PICKERLIST IN QUESTA DATA");
                    e.setVisible(true);
                    model.setRowCount(0);
                } else {
                    Err e = new Err();
                    e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
                    e.setVisible(true);
                }
            }
        } catch (NumberFormatException nf) {
            Err e = new Err();
            e.setMsgtxt("FORMATO ERRATO O CAMPO NON COMPILATO");
            e.setVisible(true);
            model.setRowCount(0);
        }
    }//GEN-LAST:event_ricPickActionPerformed

    private void jPanel11ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel11ComponentShown
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) ricPickTab.getModel();
        model.setRowCount(0);
        ric_dt.setText(this.tomorrow());
    }//GEN-LAST:event_jPanel11ComponentShown

    private void jPanel13ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel13ComponentShown
        // TODO add your handling code here:
        verslbl.setText(v);
        swelbl.setText(swe);
    }//GEN-LAST:event_jPanel13ComponentShown

    private void elimAutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elimAutActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) ricPickTab.getModel();
        String query = "DELETE FROM autisti WHERE nome=? AND cognome=? AND dn=?";
        String cancTab = "DROP TABLE IF EXISTS " + mod_nometxt.getText().toLowerCase() + mod_cognometxt.getText().toLowerCase() + mod_dtntxt.getText().replaceAll("-", "");

        try {
            conn = DriverManager.getConnection(url, user, pass);

            PreparedStatement state = conn.prepareStatement(query);
            state.setString(1, mod_nometxt.getText().toLowerCase());
            state.setString(2, mod_cognometxt.getText().toLowerCase());
            state.setString(3, mod_dtntxt.getText());
            state.executeUpdate();

            Statement canc = conn.createStatement();
            canc.executeUpdate(cancTab);
            conn.close();

            Err e = new Err();
            e.setMsgtxt("RICREARE PICKERLIST E BORDERO CON L'AUTISTA ELIMINATO");
            e.setVisible(true);
            model.setRowCount(0);

            this.pulisciModAut();
        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
            model.setRowCount(0);
        } catch (InterruptedException ex) {
            Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_elimAutActionPerformed

    private void aggActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggActionPerformed
        try {
            // TODO add your handling code here:
            this.pulisciModAut();
        } catch (InterruptedException ex) {
            Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_aggActionPerformed

    private void jPanel12ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel12ComponentShown
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tabBord.getModel();
        model.setRowCount(0);
        cbRicB.removeAllItems();
        ArrayList<Macchina> m = new ArrayList<>();
        //1. caricamento degli autisti
        cbRicB.addItem("");
        this.caricaMacchine();
        m = this.getMac();

        //2. splittaggio delle macchina
        for (Integer i = 0; i < m.size(); i++) {
            cbRicB.addItem(m.get(i).getAutistaAss().getCognome().toUpperCase() + " " + m.get(i).getAutistaAss().getNome().toUpperCase());
        }

        //3. inserisco la data
        dtRicB.setText(this.tomorrow());
    }//GEN-LAST:event_jPanel12ComponentShown

    private void ricBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ricBActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tabBord.getModel();
        if (cbRicB.getSelectedItem() != null && !cbRicB.getSelectedItem().equals("")) {
            ArrayList<Macchina> m = new ArrayList<>();
            m = this.getMac();
            Boolean b = false;

            //1. controllo la data
            try {
                try {
                    try {
                        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                        LocalDate lc = LocalDate.parse(this.checkData(dtRicB.getText()), formatter);
                        dtRicB.setText(this.checkData(dtRicB.getText()));
                    } catch (ArrayIndexOutOfBoundsException ai) {
                        Err e = new Err();
                        e.setMsgtxt("FORMATO ERRATO");
                        e.setVisible(true);
                    }
                } catch (DateTimeParseException dt) {
                    Err e = new Err();
                    e.setMsgtxt("FORMATO DATA ERRATO");
                    e.setVisible(true);
                }

                //2. connessione al db x la ricerca
                String nb = m.get(cbRicB.getSelectedIndex() - 1).getAutistaAss().getCognome().toLowerCase() + m.get(cbRicB.getSelectedIndex() - 1).getAutistaAss().getNome().toLowerCase() + m.get(cbRicB.getSelectedIndex() - 1).getTarga().toLowerCase() + dtRicB.getText().replaceAll("-", "");
                String query = "SELECT * FROM spedizioni INNER JOIN bord_" + nb + " ON spedizioni.id=bord_" + nb + ".idsped";
                try {
                    conn = DriverManager.getConnection(url, user, pass);

                    Statement state = conn.createStatement();
                    ResultSet ris = state.executeQuery(query);
                    conn.close();

                    while (ris.next()) {
                        model.addRow(new Object[]{ris.getString("tos").toUpperCase(), ris.getString("nddt").toUpperCase(), ris.getString("ncolli"), ris.getString("ragsocmitt").toUpperCase(), ris.getString("ind_mitt").toUpperCase() + ", " + ris.getString("cap_mitt"), ris.getString("ragsoc_dest").toUpperCase(), ris.getString("ind_dest").toUpperCase() + ", " + ris.getString("cap_dest"), ris.getString("tel")});
                    }

                } catch (SQLException sql) {
                    if (sql.getSQLState().equals("42P01")) {
                        model.setRowCount(0);
                        Err e = new Err();
                        e.setMsgtxt("NON ESISTE ALCUN BORDERO CON QUESTI PARAMETRI");
                        e.setVisible(true);
                    } else {
                        Err e = new Err();
                        e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
                        e.setVisible(true);
                    }
                }
            } catch (NumberFormatException nf) {
                Err e = new Err();
                e.setMsgtxt("FORMATO ERRATO");
                e.setVisible(true);
            }
        } else {
            model.setRowCount(0);
        }
    }//GEN-LAST:event_ricBActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tabBord.getModel();
        if (cbRicB.getSelectedItem() != null && !cbRicB.getSelectedItem().equals("")) {
            ArrayList<Macchina> m = new ArrayList<>();
            m = this.getMac();
            Boolean b = false;

            //1. controllo la data
            try {
                try {
                    try {
                        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                        LocalDate lc = LocalDate.parse(this.checkData(dtRicB.getText()), formatter);
                        dtRicB.setText(this.checkData(dtRicB.getText()));
                    } catch (ArrayIndexOutOfBoundsException ai) {
                        Err e = new Err();
                        e.setMsgtxt("FORMATO ERRATO");
                        e.setVisible(true);
                    }
                } catch (DateTimeParseException dt) {
                    Err e = new Err();
                    e.setMsgtxt("FORMATO DATA ERRATO");
                    e.setVisible(true);
                }

                //2. connessione al db x la ricerca
                String nb = m.get(cbRicB.getSelectedIndex() - 1).getAutistaAss().getCognome().toLowerCase() + m.get(cbRicB.getSelectedIndex() - 1).getAutistaAss().getNome().toLowerCase() + m.get(cbRicB.getSelectedIndex() - 1).getTarga().toLowerCase() + dtRicB.getText().replaceAll("-", "");
                String query = "DROP TABLE bord_" + nb;
                try {
                    conn = DriverManager.getConnection(url, user, pass);

                    Statement state = conn.createStatement();
                    /*ResultSet ris = */
                    state.executeUpdate(query);
                    conn.close();

                } catch (SQLException sql) {
                    if (sql.getSQLState().equals("42P01")) {
                        model.setRowCount(0);
                        Err e = new Err();
                        e.setMsgtxt("NON ESISTE ALCUN BORDERO CON QUESTI PARAMETRI");
                        e.setVisible(true);
                    } else {
                        Err e = new Err();
                        e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
                        e.setVisible(true);
                    }
                }
            } catch (NumberFormatException nf) {
                Err e = new Err();
                e.setMsgtxt("FORMATO ERRATO");
                e.setVisible(true);
            }
        } else {
            model.setRowCount(0);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void ricPick1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ricPick1ActionPerformed
        // TODO add your handling code here:
        String data = ric_dt.getText().replaceAll("-", "");
        String query = "DROP TABLE pick" + data;

        try {
            conn = DriverManager.getConnection(url, user, pass);

            Statement state = conn.createStatement();
            state.executeUpdate(query);
            conn.close();
        } catch (SQLException sql) {
            if (sql.getSQLState().equals("42P01")) {
                Err e = new Err();
                e.setMsgtxt("NON ESISTE ALCUNA PICKERLIST CON QUESTI PARAMETRI");
                e.setVisible(true);
            } else {
                Err e = new Err();
                e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
                e.setVisible(true);
            }
        }
    }//GEN-LAST:event_ricPick1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) servTab.getModel();
        //1. controllo data
        try {
            try {
                try {
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                    LocalDate lc = LocalDate.parse(this.checkData(dtServ.getText()), formatter);
                    dtServ.setText(this.checkData(dtServ.getText()));
                } catch (ArrayIndexOutOfBoundsException ai) {
                    Err e = new Err();
                    e.setMsgtxt("FORMATO ERRATO");
                    e.setVisible(true);
                    model.setRowCount(0);
                }
            } catch (DateTimeParseException dt) {
                Err e = new Err();
                e.setMsgtxt("FORMATO DATA ERRATO");
                e.setVisible(true);
                model.setRowCount(0);
            }

            //2. apertura della connessione
            Boolean b = false;
            String query = "SELECT * FROM spedizioni WHERE data_cons='" + dtServ.getText() + "'";

            try {
                conn = DriverManager.getConnection(url, user, pass);

                Statement state = conn.createStatement();
                ResultSet ris = state.executeQuery(query);
                conn.close();

                while (ris.next()) {
                    b = true;
                    model.addRow(new Object[]{ris.getString("tos").toUpperCase(), ris.getString("ragsocmitt").toUpperCase(), ris.getString("cap_mitt"), ris.getString("ragsoc_dest").toUpperCase(), ris.getString("cap_dest")});
                }

                if (!b) {
                    model.setRowCount(0);
                    Err e = new Err();
                    e.setMsgtxt("NESSUN SERVIZIO TROVATO CON LA DATA INSERITA");
                    e.setVisible(true);
                }
            } catch (SQLException sql) {
                Err e = new Err();
                e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
                e.setVisible(true);
                model.setRowCount(0);
            }
        } catch (NumberFormatException nf) {
            Err e = new Err();
            e.setMsgtxt("FORMATO ERRATO");
            e.setVisible(true);
            model.setRowCount(0);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jPanel14ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel14ComponentShown
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) servTab.getModel();
        model.setRowCount(0);
        dtServ.setText(this.today());
    }//GEN-LAST:event_jPanel14ComponentShown

    public ThOp getTh() {
        return th;
    }

    public void setTh(ThOp th) {
        this.th = th;
    }

    public void puliscTab() {
        DefaultTableModel model = (DefaultTableModel) tab.getModel();
        model.setRowCount(0);
    }

    public void compAut(Boolean b) {
        separator.setVisible(b);
        nomeLoc.setVisible(b);
        capLoc.setVisible(b);
        salvaZ.setVisible(b);
        nomeloclbl.setVisible(b);
        caploclbl.setVisible(b);

    }

    public void pulisciAut() {
        nometxt.setText("");
        cognometxt.setText("");
        dtntxt.setText("");
        sesso.setSelectedItem("M");
        nomeLoc.setText("");
        capLoc.setText("");
        this.setAutReg(false);
    }

    public void salvaAut(String nome, String cognome, String dn, String sesso, String stato) {
        String query = "INSERT INTO autisti(nome,cognome,dn,sesso,stato) VALUES (?,?,?,?,?)";
        try {
            conn = DriverManager.getConnection(url, user, pass);

            PreparedStatement state = conn.prepareStatement(query);
            state.setString(1, nome);
            state.setString(2, cognome);
            state.setString(3, dn);
            state.setString(4, sesso);
            state.setString(5, stato);
            state.executeUpdate();
            conn.close();

            //creazione della sua tabbella delle zone di competenza
            SalvaZone sz = new SalvaZone();
            this.setSz(sz);
            sz.setB(false);
            sz.setNome(nome);
            sz.setCognome(cognome);
            sz.setDn(dn);
            sz.start();

        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }
    }

    public void caricoAutisti(JComboBox cb) {

        ArrayList<Autisti> app = new ArrayList<>();
        String query = "SELECT * FROM autisti ORDER BY cognome ASC";

        try {
            conn = DriverManager.getConnection(url, user, pass);

            Statement state = conn.createStatement();
            //state.executeQuery(query);

            ResultSet ris = state.executeQuery(query);
            conn.close();

            while (ris.next()) {
                Autisti a = new Autisti();
                a.setNome(ris.getString("nome"));
                a.setCognome(ris.getString("cognome"));
                a.setDataNascita(ris.getString("dn"));

                app.add(a);
                cb.addItem(a.getCognome().toUpperCase() + " " + a.getNome().toUpperCase());
            }
            this.setAutisti(app);

        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }
    }

    public void salvaMacc(Macchina m) {
        String query = "INSERT INTO macchine (nome,targa,autista) VALUES (?,?,?)";

        try {
            conn = DriverManager.getConnection(url, user, pass);

            PreparedStatement state = conn.prepareStatement(query);
            state.setString(1, m.getNome());
            state.setString(2, m.getTarga());
            state.setString(3, m.getAutistaAss().getCognome() + ";" + m.getAutistaAss().getNome() + ";" + m.getAutistaAss().getDataNascita());
            state.executeUpdate();
            conn.close();

        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }
    }

    public void getGiorni(JComboBox cb) {
        LocalDate lc, oggi;
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        cb.removeAllItems();
        try {
            oggi = LocalDate.parse(this.checkData(this.today()), formatter);

            String query = "SELECT DISTINCT data_cons FROM spedizioni WHERE stato=?", data = "";

            try {
                conn = DriverManager.getConnection(url, user, pass);

                PreparedStatement state = conn.prepareStatement(query);
                state.setString(1, "acquisita");
                ResultSet ris = state.executeQuery();
                conn.close();

                while (ris.next()) {
                    data = ris.getString("data_cons");
                    lc = LocalDate.parse(this.checkData(data), formatter);
                    if (lc.isAfter(oggi)) {
                        cb.addItem(data);
                    }

                }
            } catch (SQLException sql) {
                Err e = new Err();
                e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
                e.setVisible(true);
            }
        } catch (DateTimeParseException dt) {
            Err e = new Err();
            e.setMsgtxt("ERRORE DATE " + dt.getParsedString());
            e.setVisible(true);
        }
    }

    public void caricaMacchine() {
        //macchina.removeAllItems();
        // this.setMac(null);
        String query = "SELECT * FROM macchine";
        String[] info;
        ArrayList<Macchina> mac = new ArrayList<Macchina>();
        try {
            conn = DriverManager.getConnection(url, user, pass);
            Statement state = conn.createStatement();
            ResultSet ris = state.executeQuery(query);
            conn.close();

            while (ris.next()) {
                Macchina m = new Macchina();
                Autisti a = new Autisti();
                info = ris.getString("autista").split(";");
                m.setTarga(ris.getString("targa"));
                m.setNome(ris.getString("nome"));
                a.setCognome(info[0]);
                a.setNome(info[1]);
                a.setDataNascita(info[2]);
                m.setAutistaAss(a);
                mac.add(m);
            }
            //System.out.println(mac);
            this.setMac(mac);
        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }
    }

    public void caricaSped() {
        String cap_dest;
        ArrayList<Autisti> app = new ArrayList<>();
        ArrayList<Spedizioni> sped = new ArrayList<>();
        ArrayList<Zona> cap_aut = new ArrayList<>();
        ArrayList<Associazione> ass = new ArrayList<>();

        //System.out.println(this.getA());
        app = this.getA();
        Integer dim, dim2;
        Boolean b = false;

        try {
            String query = "SELECT * FROM spedizioni WHERE stato=? AND data_cons=?";
            conn = DriverManager.getConnection(url, user, pass);

            PreparedStatement state = conn.prepareStatement(query);
            state.setString(1, "acquisita");
            state.setString(2, dataPick.getSelectedItem().toString());
            ResultSet ris = state.executeQuery();
            conn.close();

            while (ris.next()) {
                Spedizioni s = new Spedizioni();
                Cliente mitt = new Cliente();
                Cliente dest = new Cliente();

                //creo l'oggetto per poi verificarlo               
                s.setId(ris.getString("id"));
                s.setTos(ris.getString("tos"));
                //creazione mittente
                mitt.setRagSoc(ris.getString("ragsocmitt"));
                mitt.setIndirizzo(ris.getString("ind_mitt"));
                mitt.setCap(ris.getString("cap_mitt"));

                //creazione destinatario
                dest.setRagSoc(ris.getString("ragsoc_dest"));
                dest.setIndirizzo(ris.getString("ind_dest"));
                dest.setCap(ris.getString("cap_dest"));

                s.setMitt(mitt);
                s.setDest(dest);

                s.setDataAcq(ris.getString("data_acq"));
                s.setDataCons(ris.getString("data_cons"));
                s.setNddt(ris.getString("nddt"));
                s.setNc(ris.getInt("ncolli"));
                s.setVol(ris.getString("vol"));
                sped.add(s);
            }
            dim = sped.size();
            //controlli del cap
            dim2 = this.getA().size();

            //scorro per il numero delle spedizioni
            for (Integer i = 0; i < dim; i++) {
                //Associazione o = new Associazione();
                try {
                    if (sped.get(i).getTos().equalsIgnoreCase("spedizione")) {
                        cap_dest = sped.get(i).getDest().getCap();
                    } else {
                        cap_dest = sped.get(i).getMitt().getCap();
                    }

                    //ciclare per il numero di autisti
                    for (Integer j = 0; j < dim2; j++) {
                        Integer dim3 = this.getA().get(j).getCompetenza().size();

                        //ciclare per il numero di zone della autista
                        for (Integer k = 0; k < dim3; k++) {
                            if (this.getA().get(j).getCompetenza().get(k).getCap().equalsIgnoreCase(cap_dest)) {
                                Associazione o = new Associazione();
                                o.setS(sped.get(i));
                                o.setA(this.getA().get(j));

                                //ricerca macchina
                                for (Integer l = 0; l < this.getMac().size(); l++) {
                                    if ((this.getMac().get(l).getAutistaAss().getCognome() + " " + this.getMac().get(l).getAutistaAss().getNome()).equalsIgnoreCase(o.getA().getCognome() + " " + o.getA().getNome())) {
                                        o.setM(this.getMac().get(l));
                                    }
                                }

                                ass.add(o);
                                //System.out.println(o.toString());
                                //System.out.println("trovato. CAP DEST: "+cap_dest+"\nAUTISTA: "+this.getA().get(j).toString());

                            } else {
                                //System.out.println("niente");
                            }
                        }

                    }

                } catch (IndexOutOfBoundsException io) {
                    io.printStackTrace();
                }
            }
            this.setAss(ass);
            //System.out.println(ass);

            Integer dim4 = ass.size();
            String data = dataPick.getSelectedItem().toString().replaceAll("-", "");
            this.cancellaPick(data);
            for (Integer i = 0; i < dim4; i++) {
                this.createPick(data);
                this.salvaPick(ass.get(i), data);
            }

            //visualizzazione picklist
            PickList pl = new PickList();
            pl.setAss(ass);
            pl.setVisible(true);

        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }

    }

    public void cancellaPick(String data) {
        String del = "DROP TABLE IF EXISTS pick" + data;
        try {
            conn = DriverManager.getConnection(url, user, pass);

            Statement delete = conn.createStatement();
            delete.executeUpdate(del);
        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }
    }

    private void salvaPick(Associazione ass, String data) {
        String query = "INSERT INTO pick" + data + " (idsped,targa,macc,aut) VALUES (?,?,?,?)";

        try {
            conn = DriverManager.getConnection(url, user, pass);

            PreparedStatement state = conn.prepareStatement(query);
            state.setInt(1, Integer.parseInt(ass.getS().getId()));
            state.setString(2, ass.getM().getTarga());
            state.setString(3, ass.getM().getNome());
            state.setString(4, ass.getA().getCognome() + ";" + ass.getA().getNome() + ";" + ass.getA().getDataNascita().replaceAll("-", ""));
            state.executeUpdate();
            conn.close();
        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }
    }

    private void createPick(String data) {
        String query = "CREATE TABLE IF NOT EXISTS pick" + data + " ("
                + "id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
                + "idsped integer NOT NULL,"
                + "targa text NOT NULL,"
                + "macc text NOT NULL,"
                + "aut text NOT NULL"
                + ");";
        try {
            conn = DriverManager.getConnection(url, user, pass);

            Statement state = conn.createStatement();
            state.executeUpdate(query);
            conn.close();
        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }
    }

    private void setA(ArrayList<Autisti> a) {
        this.a = a;
    }

    private ArrayList<Autisti> getA() {
        return a;
    }

    public void caricoAutistoANDzone() {
        ArrayList<Autisti> aut = new ArrayList<>();
        this.setA(null);

        String nome, cognome, dn;
        Integer dim = 0;
        this.getAutisti().clear();

        //vedo elenco autisti
        try {
            String query = "SELECT * FROM autisti WHERE stato=?";
            conn = DriverManager.getConnection(url, user, pass);

            PreparedStatement state = conn.prepareStatement(query);
            state.setString(1, "disponibile");
            ResultSet ris = state.executeQuery();
            conn.close();

            while (ris.next()) {
                Autisti a = new Autisti();
                a.setNome(ris.getString("nome"));
                a.setCognome(ris.getString("cognome"));
                a.setDataNascita(ris.getString("dn"));
                a.setSesso(ris.getString("sesso"));
                aut.add(a);
            }

            this.setA(aut);

        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }

        dim = aut.size();
        //recupero zone di ogni autista
        for (Integer i = 0; i < dim; i++) {
            ArrayList<Zona> zone = new ArrayList<>();
            //zone.clear();

            nome = aut.get(i).getNome();
            cognome = aut.get(i).getCognome();
            dn = aut.get(i).getDataNascita().replaceAll("-", "");

            try {
                String query = "SELECT * FROM " + nome.concat(cognome.concat(dn));
                conn = DriverManager.getConnection(url, user, pass);

                Statement state = conn.createStatement();
                ResultSet ris = state.executeQuery(query);
                conn.close();

                Integer idx = 0;
                while (ris.next()) {

                    Zona z = new Zona();
                    this.getA().get(i).setCompetenza(null);
                    z.setLoc(ris.getString("loc"));
                    z.setCap(ris.getString("cap"));
                    zone.add(z);

                    idx = aut.indexOf(this.getA().get(i));
                    this.getA().get(i).setCompetenza(zone);

                    aut.set(i, this.getA().get(i));
                    this.setA(aut);

                }
                //System.out.println(aut);
            } catch (SQLException sql) {
                Err e = new Err();
                e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
                e.setVisible(true);
            }
        }
        this.setAutisti(aut);
    }

    public void clearRic() {
        mod_nddt.setText("");
        radioDdt.setSelected(false);
        mod_ragsoc_mitt.setText("");
        mod_ind_mitt.setText("");
        mod_cap_mitt.setText("");
        mod_ragsoc_dest.setText("");
        mod_ind_dest.setText("");
        mod_cap_dest.setText("");
        radioIntestazioni.setSelected(false);
        mod_acq.setText("");
        radioAcq.setSelected(false);
        mod_cons.setText("");
        radioCons.setSelected(false);
        mod_cli.setSelectedItem("");
    }

    public void ricercaCons(String data) {
        DefaultTableModel model = (DefaultTableModel) tab.getModel();
        model.setRowCount(0);
        Spedizioni s = new Spedizioni();
        Cliente mitt = new Cliente();
        Cliente dest = new Cliente();
        ArrayList<Spedizioni> sped = new ArrayList<>();
        sped.clear();

        try {
            conn = DriverManager.getConnection(url, user, pass);

            String query = "SELECT * FROM spedizioni WHERE data_cons=?";
            PreparedStatement state = conn.prepareStatement(query);
            state.setString(1, data);
            state.executeQuery();
            ResultSet ris = state.executeQuery();

            while (ris.next()) {
                s.setId(ris.getString("id"));
                s.setIdC(Integer.parseInt(ris.getString("id_cli")));
                s.setStato(ris.getString("stato"));
                s.setTos(ris.getString("tos"));
                s.setDataAcq(ris.getString("data_acq"));
                mitt.setRagSoc(ris.getString("ragsocmitt"));
                mitt.setIndirizzo(ris.getString("ind_mitt"));
                mitt.setCap(ris.getString("cap_mitt"));
                s.setMitt(mitt);
                dest.setRagSoc(ris.getString("ragsoc_dest"));
                dest.setIndirizzo(ris.getString("ind_dest"));
                dest.setCap(ris.getString("cap_dest"));
                s.setDest(dest);
                s.setNddt(ris.getString("nddt"));
                s.setDataCons(ris.getString("data_cons"));
                s.setNc(ris.getInt("ncolli"));
                s.setTel(ris.getString("tel"));
                s.setVol(ris.getString("vol"));
                sped.add(s);

                //stampa su tabella
                model.addRow(new Object[]{s.getId(), s.getMitt().getRagSoc().toUpperCase(), s.getDest().getRagSoc().toUpperCase(), s.getNddt(), s.getTel()});
            }

            this.setSped(sped);
        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }
    }

    public void setSped(ArrayList<Spedizioni> sped) {
        this.sped = sped;
    }

    public ArrayList<Spedizioni> getSped() {
        return sped;
    }

    public void ricercaAcq(String data) {
        DefaultTableModel model = (DefaultTableModel) tab.getModel();
        model.setRowCount(0);
        Spedizioni s = new Spedizioni();
        Cliente mitt = new Cliente();
        Cliente dest = new Cliente();
        ArrayList<Spedizioni> sped = new ArrayList<>();
        sped.clear();

        try {
            conn = DriverManager.getConnection(url, user, pass);

            String query = "SELECT * FROM spedizioni WHERE data_acq=?";
            PreparedStatement state = conn.prepareStatement(query);
            state.setString(1, data);
            state.executeQuery();
            ResultSet ris = state.executeQuery();

            while (ris.next()) {
                s.setId(ris.getString("id"));
                s.setIdC(Integer.parseInt(ris.getString("id_cli")));
                s.setStato(ris.getString("stato"));
                s.setTos(ris.getString("tos"));
                s.setDataAcq(ris.getString("data_acq"));
                mitt.setRagSoc(ris.getString("ragsocmitt"));
                mitt.setIndirizzo(ris.getString("ind_mitt"));
                mitt.setCap(ris.getString("cap_mitt"));
                s.setMitt(mitt);
                dest.setRagSoc(ris.getString("ragsoc_dest"));
                dest.setIndirizzo(ris.getString("ind_dest"));
                dest.setCap(ris.getString("cap_dest"));
                s.setDest(dest);
                s.setNddt(ris.getString("nddt"));
                s.setDataCons(ris.getString("data_cons"));
                s.setNc(ris.getInt("ncolli"));
                s.setTel(ris.getString("tel"));
                s.setVol(ris.getString("vol"));
                sped.add(s);

                //stampa su tabella
                model.addRow(new Object[]{s.getId(), s.getMitt().getRagSoc().toUpperCase(), s.getDest().getRagSoc().toUpperCase(), s.getNddt(), s.getTel()});
            }

            this.setSped(sped);
        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }
    }

    public void ricercaIntestaz(Cliente mittPar, Cliente destPar) {
        DefaultTableModel model = (DefaultTableModel) tab.getModel();
        model.setRowCount(0);
        Spedizioni s = new Spedizioni();
        Cliente mitt = new Cliente();
        Cliente dest = new Cliente();
        ArrayList<Spedizioni> sped = new ArrayList<>();
        sped.clear();

        try {
            conn = DriverManager.getConnection(url, user, pass);

            String query = "SELECT * FROM spedizioni WHERE ragsocmitt=? AND ind_mitt=? AND cap_mitt=? AND ragsoc_dest=? AND ind_dest=? AND cap_dest=?";
            PreparedStatement state = conn.prepareStatement(query);
            state.setString(1, mittPar.getRagSoc().toLowerCase());
            state.setString(2, mittPar.getIndirizzo().toLowerCase());
            state.setString(3, mittPar.getCap().toLowerCase());
            state.setString(4, destPar.getRagSoc().toLowerCase());
            state.setString(5, destPar.getIndirizzo().toLowerCase());
            state.setString(6, destPar.getCap().toLowerCase());
            state.executeQuery();
            ResultSet ris = state.executeQuery();

            while (ris.next()) {
                s.setId(ris.getString("id"));
                s.setIdC(Integer.parseInt(ris.getString("id_cli")));
                s.setStato(ris.getString("stato"));
                s.setTos(ris.getString("tos"));
                s.setDataAcq(ris.getString("data_acq"));
                mitt.setRagSoc(ris.getString("ragsocmitt"));
                mitt.setIndirizzo(ris.getString("ind_mitt"));
                mitt.setCap(ris.getString("cap_mitt"));
                s.setMitt(mitt);
                dest.setRagSoc(ris.getString("ragsoc_dest"));
                dest.setIndirizzo(ris.getString("ind_dest"));
                dest.setCap(ris.getString("cap_dest"));
                s.setDest(dest);
                s.setNddt(ris.getString("nddt"));
                s.setDataCons(ris.getString("data_cons"));
                s.setNc(ris.getInt("ncolli"));
                s.setTel(ris.getString("tel"));
                s.setVol(ris.getString("vol"));
                sped.add(s);

                //stampa su tabella
                model.addRow(new Object[]{s.getId(), s.getMitt().getRagSoc().toUpperCase(), s.getDest().getRagSoc().toUpperCase(), s.getNddt(), s.getTel()});
            }

            this.setSped(sped);
        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }
    }

    public void ricercaDdt(String ddt) {
        DefaultTableModel model = (DefaultTableModel) tab.getModel();
        model.setRowCount(0);
        Spedizioni s = new Spedizioni();
        Cliente mitt = new Cliente();
        Cliente dest = new Cliente();
        ArrayList<Spedizioni> sped = new ArrayList<>();
        sped.clear();

        try {
            conn = DriverManager.getConnection(url, user, pass);

            String query = "SELECT * FROM spedizioni WHERE nddt=?";
            PreparedStatement state = conn.prepareStatement(query);
            state.setString(1, ddt);
            state.executeQuery();
            ResultSet ris = state.executeQuery();

            while (ris.next()) {
                s.setId(ris.getString("id"));
                s.setIdC(Integer.parseInt(ris.getString("id_cli")));
                s.setStato(ris.getString("stato"));
                s.setTos(ris.getString("tos"));
                s.setDataAcq(ris.getString("data_acq"));
                mitt.setRagSoc(ris.getString("ragsocmitt"));
                mitt.setIndirizzo(ris.getString("ind_mitt"));
                mitt.setCap(ris.getString("cap_mitt"));
                s.setMitt(mitt);
                dest.setRagSoc(ris.getString("ragsoc_dest"));
                dest.setIndirizzo(ris.getString("ind_dest"));
                dest.setCap(ris.getString("cap_dest"));
                s.setDest(dest);
                s.setNddt(ris.getString("nddt"));
                s.setDataCons(ris.getString("data_cons"));
                s.setNc(ris.getInt("ncolli"));
                s.setTel(ris.getString("tel"));
                s.setVol(ris.getString("vol"));
                sped.add(s);

                //stampa su tabella
                model.addRow(new Object[]{s.getId(), s.getMitt().getRagSoc().toUpperCase(), s.getDest().getRagSoc().toUpperCase(), s.getNddt(), s.getTel()});
            }

            this.setSped(sped);

        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }
    }

    public void setT(Multithreading t) {
        this.t = t;
    }

    public Multithreading getT() {
        return t;
    }

    public void salvaSped(String idCli, String stato, String tos, String dataAcq, String ragSocMitt, String indMitt, String capMitt, String ragSocDest, String indDest, String capDest, String nddt, String dataCons, String ncolli, String tel, String vol) {
        try {
            conn = DriverManager.getConnection(url, user, pass);

            String query = "INSERT INTO spedizioni (id_cli,stato,tos,data_acq,ragsocmitt,ind_mitt,cap_mitt,ragsoc_dest,ind_dest,cap_dest,nddt,data_cons,ncolli,tel,vol) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement state = conn.prepareStatement(query);

            state.setString(1, idCli);
            state.setString(2, stato.toLowerCase());
            state.setString(3, tos.toLowerCase());
            state.setString(4, dataAcq);
            state.setString(5, ragSocMitt.toLowerCase());
            state.setString(6, indMitt.toLowerCase());
            state.setString(7, capMitt);
            state.setString(8, ragSocDest.toLowerCase());
            state.setString(9, indDest.toLowerCase());
            state.setString(10, capDest);
            state.setString(11, nddt);
            state.setString(12, dataCons);
            state.setString(13, ncolli);
            state.setString(14, tel);
            state.setString(15, vol);
            state.executeUpdate();

        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }
    }

    public String tomorrow() {
        LocalDate domani;
        String data = null;
        try {
            try {
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                LocalDate lc = LocalDate.parse(this.checkData(this.today()), formatter);
                domani = lc.plusDays(1);
                data = this.checkData(domani.getDayOfMonth() + "-" + domani.getMonthValue() + "-" + domani.getYear());
                dataCons.setText(data);
            } catch (ArrayIndexOutOfBoundsException ai) {
                Err e = new Err();
                e.setMsgtxt("FORMATO ERRATO");
                e.setVisible(true);
            }
        } catch (DateTimeParseException dt) {
            Err e = new Err();
            e.setMsgtxt("FORMATO DATA DI CONSEGNA ERRATO [" + dt.getErrorIndex() + ", " + dt.getParsedString() + "]");
            e.setVisible(true);
        }
        return data;
    }

    public String today() {
        LocalDate lc = LocalDate.now();
        String data = "";
        Boolean b = false;

        if (lc.getDayOfMonth() < 10) {
            b = true;
            data = "0" + lc.getDayOfMonth() + "-" + lc.getMonthValue() + "-" + lc.getYear();
        }

        if (lc.getMonthValue() < 10) {
            b = true;
            data = lc.getDayOfMonth() + "-0" + lc.getMonthValue() + "-" + lc.getYear();
        }
        if (!b) {
            data = lc.getDayOfMonth() + "-" + lc.getMonthValue() + "-" + lc.getYear();
        }

        return data;
    }

    public void clearCont() {
        ragSoc.setText("");
        indirizzo.setText("");
        cap.setText("");
    }

    public void querySalvaCont(String ragSoc, String indirizzo, Integer cap, Connection conn) {
        String query = "INSERT INTO clienti (nome,indirizzo,cap) VALUES(?,?,?)";
        try {
            PreparedStatement state = conn.prepareStatement(query);
            state.setString(1, ragSoc.toLowerCase());
            state.setString(2, indirizzo.toLowerCase());
            state.setString(3, cap.toString());
            state.executeUpdate();
        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }
    }

    public void clearField() {
        nomCli.setSelectedItem("");
        stato.setText("");
        ragsocMitt.setText("");
        indMitt.setText("");
        capMitt.setText("");
        idCli.setText("");
        ragsocDest.setText("");
        indDest.setText("");
        capDest.setText("");
        ddtxt.setText("");
        dataCons.setText("");
        ncollitxt.setText("");
        teltxt.setText("");
        voltxt.setText("");
    }

    public ArrayList<Cliente> caricoClienti() {
        /*nomCli.removeAllItems();
        nomCli.addItem("");*/
        clienti.clear();

        try {
            conn = DriverManager.getConnection(url, user, pass);
            String query = "SELECT * FROM clienti ORDER BY nome ASC";
            Statement state = conn.createStatement();
            ResultSet ris = state.executeQuery(query);

            while (ris.next()) {
                Cliente c = new Cliente();
                c.setRagSoc(ris.getString("nome").toUpperCase());
                c.setIndirizzo(ris.getString("indirizzo").toUpperCase());
                c.setCap(ris.getString("cap"));
                c.setId(ris.getInt("id"));
                clienti.add(c);
                //nomCli.addItem(c.getRagSoc().toUpperCase());
            }
            //nomCli.addItem("Altro");

        } catch (SQLException sql) {
            Err e = new Err();
            e.setMsgtxt("DB ERROR. ERROR CODE " + sql.getErrorCode() + ", SQL STATE " + sql.getSQLState());
            e.setVisible(true);
        }
        return clienti;
    }

    public String checkData(String datatxt) {
        String data = "", app[] = datatxt.split("-");
        Boolean b = false;

        if (Integer.parseInt(app[0]) < 10 && app[0].length() < 2) {
            b = true;
            data = "0" + app[0] + "-" + app[1] + "-" + app[2];
        }

        if (Integer.parseInt(app[1]) < 10 && app[1].length() < 2) {
            b = true;
            data = app[0] + "-0" + app[1] + "-" + app[2];
        }

        if ((Integer.parseInt(app[1]) < 10 && app[1].length() < 2) && (Integer.parseInt(app[0]) < 10 && app[0].length() < 2)) {
            b = true;
            data = "0" + app[0] + "-0" + app[1] + "-" + app[2];
        }

        if (!b) {
            data = app[0] + "-" + app[1] + "-" + app[2];
        }

        return data;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Start.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Start.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Start.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Start.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Start().setVisible(true);

            }

        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agg;
    private javax.swing.JButton aggLoc;
    private javax.swing.JButton aggMacc;
    private javax.swing.JButton aggZ;
    private javax.swing.JButton aggiornaCli;
    private javax.swing.JComboBox<String> autDisp;
    private javax.swing.JComboBox<String> autista;
    private javax.swing.JButton cancLoc;
    private javax.swing.JTextField cap;
    private javax.swing.JTextField capDest;
    private javax.swing.JTextField capLoc;
    private javax.swing.JTextField capMitt;
    private javax.swing.JLabel caploclbl;
    private javax.swing.JComboBox<String> cbRicB;
    private javax.swing.JTextField cognometxt;
    private javax.swing.JTextField data;
    private javax.swing.JComboBox<String> dataBord;
    private javax.swing.JTextField dataCons;
    private javax.swing.JComboBox<String> dataPick;
    private javax.swing.JTextField ddtxt;
    private javax.swing.JTextField dtRicB;
    private javax.swing.JTextField dtServ;
    private javax.swing.JTextField dtntxt;
    private javax.swing.JButton elabPick;
    private javax.swing.JButton elimAut;
    private javax.swing.JButton eliminaCli;
    private javax.swing.JTextField idCli;
    private javax.swing.JTextField indDest;
    private javax.swing.JTextField indMitt;
    private javax.swing.JTextField indirizzo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JTabbedPane jTabbedPane11;
    private javax.swing.JLabel jlabel22;
    private javax.swing.JLabel jlabel23;
    private javax.swing.JLabel jlabel24;
    private javax.swing.JLabel jlabel25;
    private javax.swing.JLabel jlabel26;
    private javax.swing.JLabel jlabel27;
    private javax.swing.JLabel jlabel28;
    private javax.swing.JLabel jlabel29;
    private javax.swing.JLabel jlabel30;
    private javax.swing.JLabel jlabel31;
    private javax.swing.JLabel jlabel32;
    private javax.swing.JLabel jlabel33;
    public javax.swing.JComboBox<String> macchina;
    private javax.swing.JComboBox<String> modCli;
    private javax.swing.JButton modMacDel;
    private javax.swing.JTextField mod_acq;
    public javax.swing.JComboBox<String> mod_autista;
    private javax.swing.JTextField mod_capMitt;
    private javax.swing.JTextField mod_cap_dest;
    private javax.swing.JTextField mod_cap_mitt;
    private javax.swing.JButton mod_cerca;
    private javax.swing.JComboBox<String> mod_cli;
    private javax.swing.JTextField mod_cognometxt;
    private javax.swing.JTextField mod_cons;
    private javax.swing.JTextField mod_dtntxt;
    private javax.swing.JButton mod_elimina;
    private javax.swing.JButton mod_giacenza;
    private javax.swing.JTextField mod_id_mitt;
    private javax.swing.JTextField mod_indMitt;
    private javax.swing.JTextField mod_ind_dest;
    private javax.swing.JTextField mod_ind_mitt;
    private javax.swing.JButton mod_ispeziona;
    private javax.swing.JTextField mod_nddt;
    private javax.swing.JTextField mod_nomeMacc;
    private javax.swing.JTextField mod_nometxt;
    private javax.swing.JTextField mod_ragsocMitt;
    private javax.swing.JTextField mod_ragsoc_dest;
    private javax.swing.JTextField mod_ragsoc_mitt;
    private javax.swing.JButton mod_riserva;
    private javax.swing.JComboBox<String> mod_sesso;
    private javax.swing.JButton mod_storico;
    private javax.swing.JTextField mod_targaMacc;
    private javax.swing.JTextField ncollitxt;
    private javax.swing.JComboBox<String> nomCli;
    private javax.swing.JTextField nomeLoc;
    private javax.swing.JTextField nomeMacc;
    private javax.swing.JLabel nomeloclbl;
    private javax.swing.JTextField nometxt;
    private javax.swing.JButton ottieniBord;
    private javax.swing.JButton pulisci;
    private javax.swing.JRadioButton radioAcq;
    private javax.swing.JRadioButton radioCons;
    private javax.swing.JRadioButton radioDdt;
    private javax.swing.JRadioButton radioIntestazioni;
    private javax.swing.JTextField ragSoc;
    private javax.swing.JTextField ragsocDest;
    private javax.swing.JTextField ragsocMitt;
    private javax.swing.JButton ricB;
    private javax.swing.JButton ricPick;
    private javax.swing.JButton ricPick1;
    private javax.swing.JTable ricPickTab;
    private javax.swing.JTextField ric_dt;
    private javax.swing.JLabel rifMacc;
    private javax.swing.JLabel rifMacc1;
    private javax.swing.JLabel rifMacc2;
    private javax.swing.JLabel rifMacc3;
    private javax.swing.JLabel rifMacc4;
    private javax.swing.JLabel rifMacc5;
    private javax.swing.JLabel rifMacc7;
    private javax.swing.JButton salva;
    private javax.swing.JButton salvaAut;
    private javax.swing.JButton salvaContatto;
    private javax.swing.JButton salvaMacc;
    private javax.swing.JButton salvaModAut;
    private javax.swing.JButton salvaZ;
    private javax.swing.JSeparator separator;
    private javax.swing.JTable servTab;
    private javax.swing.JComboBox<String> sesso;
    private javax.swing.JTextField stato;
    private javax.swing.JLabel swelbl;
    private javax.swing.JTable tab;
    private javax.swing.JTable tabBord;
    public javax.swing.JTable tabModAut;
    private javax.swing.JTabbedPane tabRicBord;
    private javax.swing.JTextField targaMacc;
    private javax.swing.JTextField teltxt;
    private javax.swing.JComboBox<String> tos;
    private javax.swing.JLabel verslbl;
    private javax.swing.JTextField voltxt;
    // End of variables declaration//GEN-END:variables
}
